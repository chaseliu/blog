{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/assets/img/apple-touch-icon.png","path":"assets/img/apple-touch-icon.png","modified":1,"renderable":0},{"_id":"source/assets/img/favicon-16x16.png","path":"assets/img/favicon-16x16.png","modified":1,"renderable":0},{"_id":"source/assets/img/favicon-32x32.png","path":"assets/img/favicon-32x32.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/assets/img/avatar.jpg","path":"assets/img/avatar.jpg","modified":1,"renderable":0},{"_id":"source/assets/img/octocats-v2.png","path":"assets/img/octocats-v2.png","modified":1,"renderable":0},{"_id":"source/assets/img/octocats-v3.png","path":"assets/img/octocats-v3.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"source/assets/img/octocats-v1.JPG","path":"assets/img/octocats-v1.JPG","modified":1,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1528963428318},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1528963428318},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1528963428318},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1528963428318},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1528963428320},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1528963428320},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1528963428320},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1528963428320},{"_id":"themes/next/README.md","hash":"807c28ad6473b221101251d244aa08e2a61b0d60","modified":1528963428320},{"_id":"themes/next/_config.yml","hash":"c92feb4598124a31d00b74f3fb4c8cfeb6a190c8","modified":1529081103150},{"_id":"themes/next/bower.json","hash":"a8c832da6aad5245052aed7ff26c246f85d68c6c","modified":1528963428321},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1528963428321},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1528963428327},{"_id":"themes/next/package.json","hash":"11a0b27f92da8abf1efbea6e7a0af4271d7bff9e","modified":1528963428346},{"_id":"source/_posts/CentOS7中安装MongoDB.md","hash":"8316bad911c775e7d5ed7442f73c9225e310445a","modified":1528966808257},{"_id":"source/_posts/IPTables-HowTos.md","hash":"d524262e00353c9367e139cd642f4eac5e2e957d","modified":1528966808258},{"_id":"source/_posts/JKOM-CentOS-VM-Setup.md","hash":"5a34622daec57f658aa0b8464b9647763692f5a4","modified":1528966808258},{"_id":"source/_posts/Running-Node-js-on-Linux-with-systemd.md","hash":"36fad9f0010241790cca6aa3e73359a9743b4b7e","modified":1528966808259},{"_id":"source/about/index.md","hash":"28a1438be6c0c5ebb2314eb98222c9db1fb93eeb","modified":1528966808259},{"_id":"source/assets/.DS_Store","hash":"8983992a301632f377142eb0de9b7125c7a7c97a","modified":1531982856070},{"_id":"source/cnl/index.html","hash":"8e681caaf01c04eacc23cca45a0cd220ebebdf68","modified":1549523963683},{"_id":"source/tags/index.md","hash":"9e884f91e69694f4fe1a241773b437fd1253107c","modified":1528966006490},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1528963428310},{"_id":"themes/next/.git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1528963428312},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1528963387780},{"_id":"themes/next/.git/index","hash":"5dd59ea9b7ddfa9d0b60d4b0f06465033f21d1f2","modified":1528992309501},{"_id":"themes/next/.git/packed-refs","hash":"d75241a6c83c4785c088d254dd31735a7a18e2c0","modified":1528963428309},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1528963428318},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"f846118d7fc68c053df47b24e1f661241645373f","modified":1528963428319},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1528963428319},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1528963428319},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1528963428319},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1528963428319},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1528963428322},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1528963428321},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1528963428322},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1528963428322},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1528963428322},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1528963428323},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1528963428323},{"_id":"themes/next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1528963428323},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1528963428323},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1528963428327},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1528963428327},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1528963428327},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1528963428327},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1528963428328},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1528963428328},{"_id":"themes/next/languages/ja.yml","hash":"5f8e54c666393d1ca2e257f6b1e3b4116f6657d8","modified":1528963428328},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1528963428328},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1528963428328},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1528963428328},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1528963428329},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1528963428329},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1528963428329},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1528963428329},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1528963428329},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1528963428329},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1528963428330},{"_id":"themes/next/layout/_layout.swig","hash":"09e8a6bfe5aa901c66d314601c872e57f05509e8","modified":1528963428330},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1528963428344},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1528963428345},{"_id":"themes/next/layout/index.swig","hash":"53300ca42c00cba050bc98b0a3f2d888d71829b1","modified":1528963428345},{"_id":"themes/next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1528963428345},{"_id":"themes/next/layout/post.swig","hash":"e7458f896ac33086d9427979f0f963475b43338e","modified":1528963428345},{"_id":"themes/next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1528963428345},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1528963428346},{"_id":"themes/next/scripts/helpers.js","hash":"392cda207757d4c055b53492a98f81386379fc4f","modified":1528963428346},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1528963428347},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1528963428347},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1528963428387},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1528963428388},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1528963428388},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528963428374},{"_id":"source/assets/img/apple-touch-icon.png","hash":"af1167aed45decbec40ff6d23c05c78f52ae609e","modified":1529081044734},{"_id":"source/assets/img/favicon-16x16.png","hash":"9b504cddb22ad95cb03aafc45dd28c6a42ce3b13","modified":1529081032286},{"_id":"source/assets/img/favicon-32x32.png","hash":"376a12b6d4ee9c162a264e438ccf36c2abd10b43","modified":1529081032302},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1528963387782},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1528963387781},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1528963387782},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1528963387783},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1528963387781},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1528963387783},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1528963387781},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1528963387782},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1528963387782},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1528963387783},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1528963387780},{"_id":"themes/next/.git/logs/HEAD","hash":"9e8ce23879b1c8ad9893631d0af0d503fe1a5b8f","modified":1528963428311},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1528963428324},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1528963428324},{"_id":"themes/next/docs/ru/README.md","hash":"712d9a9a557c54dd6638adfb0e1d2bb345b60756","modified":1528963428324},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1528963428324},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1528963428325},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1528963428325},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"44e4fb7ce2eca20dfa98cdd1700b50d6def4086f","modified":1528963428325},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1528963428325},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1528963428326},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1528963428326},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1528963428326},{"_id":"themes/next/docs/zh-CN/README.md","hash":"84d349fda6b9973c81a9ad4677db9d9ee1828506","modified":1528963428326},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"c1ba919f70efe87a39e6217883e1625af0b2c23c","modified":1528963428327},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1528963428330},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1528963428330},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1528963428330},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1528963428331},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0790ddbc349508d7ece45a9a4391d0a1cd7263cc","modified":1528963428331},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1528963428331},{"_id":"themes/next/layout/_macro/post.swig","hash":"686e60ede86547bdd7bc34c3629e4c9dbd134a21","modified":1528963428332},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1528963428332},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1528963428332},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1528963428332},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1528963428332},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5df32b286a8265ba82a4ef5e1439ff34751545ad","modified":1528963428333},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1ae77b6a369f83c9986408f2ab448090e37cd2dc","modified":1528963428333},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1528963428334},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1528963428334},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1528963428336},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1528963428336},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1528963428336},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1528963428337},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1528963428339},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1528963428341},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1528963428341},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1528963428341},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1528963428342},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1528963428342},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1528963428342},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1528963428342},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1528963428342},{"_id":"themes/next/scripts/tags/button.js","hash":"5a61c2da25970a4981fbd65f4a57c5e85db4dcda","modified":1528963428347},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"db70a841e7c1708f95ca97b44413b526b267fa9b","modified":1528963428348},{"_id":"themes/next/scripts/tags/exturl.js","hash":"2b3a4dc15dea33972c0b6d46a1483dabbf06fb5b","modified":1528963428348},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a98fc19a90924f2368e1982f8c449cbc09df8439","modified":1528963428348},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1b97b1b5364945b8ab3e50813bef84273055234f","modified":1528963428349},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"b7600f6b868d8f4f7032126242d9738cd1e6ad71","modified":1528963428349},{"_id":"themes/next/scripts/tags/label.js","hash":"621004f2836040b12c4e8fef77e62cf22c561297","modified":1528963428349},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"460e5e1f305847dcd4bcab9da2038a85f0a1c273","modified":1528963428349},{"_id":"themes/next/scripts/tags/note.js","hash":"4975d4433e11161b2e9a5744b7287c2d667b3c76","modified":1528963428350},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1528963428350},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1528963428374},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1528963428374},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1528963428374},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1528963428375},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1528963428375},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1528963428375},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1528963428375},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1528963428375},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1528963428376},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1528963428376},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1528963428376},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1528963428376},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1528963428377},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528963428377},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1528963428377},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528963428377},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1528963428377},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1528963428377},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1528963428378},{"_id":"source/assets/img/avatar.jpg","hash":"e62a941e7465ff4342a30c8572eebaffbaf2bced","modified":1523434796778},{"_id":"source/assets/img/octocats-v2.png","hash":"d101f0884a270747eb147ebe5c0f0b1a1c816f64","modified":1529893078087},{"_id":"source/assets/img/octocats-v3.png","hash":"089c91576f371b33dd5617db88f33f6bcf3d4b78","modified":1523434796785},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528963428337},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528963428337},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528963428368},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528963428368},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528963428369},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528963428373},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528963428374},{"_id":"themes/next/.git/refs/heads/master","hash":"25836422e7cf73548bee31973858bdb47bb6c90c","modified":1528963428311},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1528963428331},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1528963428331},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1528963428333},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1528963428333},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1528963428333},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1528963428334},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1528963428334},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1528963428334},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1528963428334},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1528963428335},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1528963428335},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1528963428335},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1528963428335},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1528963428335},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1528963428335},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1528963428335},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1528963428336},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1528963428336},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1528963428336},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1528963428337},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1528963428337},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1528963428337},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1528963428337},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1528963428338},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1528963428338},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1528963428338},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1528963428338},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1528963428338},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1528963428338},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"cee047575ae324398025423696b760db64d04e6f","modified":1528963428338},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1528963428339},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1528963428339},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1528963428339},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1528963428339},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"8878241797f8494a70968756c57cacdfc77b61c7","modified":1528963428339},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1528963428340},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1528963428340},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1528963428340},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1528963428340},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"c0eb6123464d745ac5324ce6deac8ded601f432f","modified":1528963428340},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1528963428340},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1528963428341},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1528963428341},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1528963428342},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1528963428343},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1528963428343},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1528963428344},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1528963428344},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1528963428368},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1528963428368},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1528963428368},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"81ca13d6d0beff8b1a4b542a51e3b0fb68f08efd","modified":1528963428369},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"7a2706304465b9e673d5561b715e7c72a238437c","modified":1528963428373},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1528963428373},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"32392d213f5d05bc26b2dc452f2fc6fea9d44f6d","modified":1528963428373},{"_id":"themes/next/source/css/_variables/base.styl","hash":"cfb03ec629f13883509eac66e561e9dba562333f","modified":1528963428374},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1528963428378},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1528963428378},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"40de94fd18fcbd67a327d63b0d1e242a08aa5404","modified":1528963428378},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1528963428378},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1528963428379},{"_id":"themes/next/source/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1528963428379},{"_id":"themes/next/source/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1528963428379},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1528963428379},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1528963428379},{"_id":"themes/next/source/js/src/utils.js","hash":"254fe047031981ec772728703fa6e065ede838b0","modified":1528963428380},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1528963428380},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1528963428380},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1528963428380},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1528963428380},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1528963428381},{"_id":"themes/next/source/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1528992319542},{"_id":"themes/next/source/lib/pace/README.md","hash":"33b87ed998d59f117dc329f999a4ffc744b41e79","modified":1528992319542},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1528992319542},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1528992319543},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1528992319543},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1528992319543},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1528992319543},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1528992319544},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1528992319544},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1528992319544},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1528992319544},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1528992319545},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1528992319545},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1528992319545},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1528992319546},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1528992319546},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1528963428387},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1528963428387},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1528963428387},{"_id":"source/assets/img/octocats-v1.JPG","hash":"764036224206a7608e6d57e5e6c3504da73e1eff","modified":1529893074622},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1528963428384},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"9e8ce23879b1c8ad9893631d0af0d503fe1a5b8f","modified":1528963428311},{"_id":"themes/next/.git/objects/pack/pack-f7de328b22271ee056739b70dddf40cae7c049c8.idx","hash":"1208373a61853a185a8486c043fcfa54752dac18","modified":1528963428298},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1528963428310},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1528963428343},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1528963428343},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1528963428350},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1528963428351},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1528963428351},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1528963428351},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1528963428351},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1528963428355},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1528963428362},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1528963428366},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1528963428367},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1528963428367},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1528963428367},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1528963428367},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1528963428368},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1528963428368},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"f362fbc791dafb378807cabbc58abf03e097af6d","modified":1528963428369},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1528963428369},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1528963428369},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1528963428370},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1528963428370},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1528963428370},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1528963428370},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1528963428370},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1528963428371},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1528963428371},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1528963428371},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1528963428371},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1528963428371},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1528963428372},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ba1842dbeb97e46c6c4d2ae0e7a2ca6d610ada67","modified":1528963428372},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1528963428372},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1528963428372},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1528963428372},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1528963428373},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1528963428373},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1528963428379},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1528963428381},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1528963428381},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1528963428382},{"_id":"themes/next/source/lib/pace/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1528992319537},{"_id":"themes/next/source/lib/pace/.git/config","hash":"46d590e05dc25560a69d5cc71b337adad9654443","modified":1528992319538},{"_id":"themes/next/source/lib/pace/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1528992317216},{"_id":"themes/next/source/lib/pace/.git/index","hash":"32fdb6e29e91ad046372b5d47b8c6c84b1801ab7","modified":1528992319546},{"_id":"themes/next/source/lib/pace/.git/packed-refs","hash":"2423e57d7b82d584aa814481ceeff0055b991cda","modified":1528992319535},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1528963428385},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1528963428385},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1528963428384},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"9e8ce23879b1c8ad9893631d0af0d503fe1a5b8f","modified":1528963428310},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1528963428352},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1528963428352},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1528963428352},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1528963428352},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1528963428352},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1528963428352},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1528963428353},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1528963428353},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1528963428353},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1528963428354},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1528963428354},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1528963428354},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1528963428354},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1528963428355},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1528963428355},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1528963428355},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1528963428356},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1528963428356},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1528963428356},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1528963428356},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1528963428357},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1528963428357},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1528963428357},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1528963428357},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1528963428357},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1528963428358},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1528963428358},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1528963428358},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1528963428358},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1528963428359},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1528963428359},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1528963428359},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1528963428359},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"bbe0d111f6451fc04e52719fd538bd0753ec17f9","modified":1528963428360},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1528963428360},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1528963428360},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1528963428360},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1528963428360},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1528963428361},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1528963428361},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1528963428361},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1528963428361},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1528963428362},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1528963428362},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"5d15cc8bbefe44c77a9b9f96bf04a6033a4b35b8","modified":1528963428362},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1528963428362},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1528963428363},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1528963428363},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1528963428363},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1528963428363},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1528963428364},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1528963428364},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1528963428364},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1528963428365},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1528963428365},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1528963428365},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1528963428365},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1528963428366},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1528963428366},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1528963428366},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c06be422bc41fd35e5c7948cdea2c09961207f6","modified":1528963428366},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1528963428370},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1528963428371},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1528963428372},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1528963428383},{"_id":"themes/next/source/lib/pace/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1528992317217},{"_id":"themes/next/source/lib/pace/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1528992317216},{"_id":"themes/next/source/lib/pace/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1528992317218},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1528992317218},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1528992317217},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1528992317218},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1528992317217},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1528992317217},{"_id":"themes/next/source/lib/pace/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1528992317218},{"_id":"themes/next/source/lib/pace/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1528992317219},{"_id":"themes/next/source/lib/pace/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1528992317215},{"_id":"themes/next/source/lib/pace/.git/logs/HEAD","hash":"9a6ae168d72461586c00a4573f31b446e993fe62","modified":1528992319537},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1528963428386},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1528963428383},{"_id":"themes/next/source/lib/pace/.git/objects/00/13175fe71888324d9142744034e8296501174a","hash":"0ad0e50f7fe91fe14491924aa4b1e2e8f060a5cd","modified":1528992319519},{"_id":"themes/next/source/lib/pace/.git/objects/1c/159365320ef5dde63906912f3df067376b40d0","hash":"1dd6b7373c3f9c67e34aa319c9c08fd0f667156a","modified":1528992319528},{"_id":"themes/next/source/lib/pace/.git/objects/23/4f9b3e93f06a85cb2ec01acc872ccdc2bec7cb","hash":"63f8640eceff35a80175a102fcbd8789e690cfaa","modified":1528992319520},{"_id":"themes/next/source/lib/pace/.git/objects/35/a749d823ad0aae6111a76dc501a1170478f376","hash":"e757129fb6bca3170b62b05f3e850e4b55f3ae88","modified":1528992319527},{"_id":"themes/next/source/lib/pace/.git/objects/3e/dcd352d2a1a60dbb6a43e7e9f00bab8b55791a","hash":"725bf5094855cd943dd1cd351906fb1ebec1d861","modified":1528992319522},{"_id":"themes/next/source/lib/pace/.git/objects/41/28e69301ad36a283c0fc523f3aef89644d2467","hash":"d8b985cf431fbdc5b4fa3be89e27db7a3437c920","modified":1528992319529},{"_id":"themes/next/source/lib/pace/.git/objects/49/0db22b657dd64430d003fe2831905a54858b22","hash":"43694656c4c331cfa3667afca630bd486ac0d0fe","modified":1528992319526},{"_id":"themes/next/source/lib/pace/.git/objects/4d/fbb499a4f7b2f26a535c335cd66c966ff8b261","hash":"14e4cdcc137045c7efed32f796273d40c9fcef87","modified":1528992319526},{"_id":"themes/next/source/lib/pace/.git/objects/53/3d55db0342c2b011ac05703c3b42e88a25c1ed","hash":"c48454760d2e04602a5499188b33d38839c58aee","modified":1528992319527},{"_id":"themes/next/source/lib/pace/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1528992319518},{"_id":"themes/next/source/lib/pace/.git/objects/60/0378418401f2b0e7c58407a7bbc5a5196cfa51","hash":"20489d796247dda758599f40cbfcf14d194ef64a","modified":1528992319517},{"_id":"themes/next/source/lib/pace/.git/objects/82/8dcba3c8a21de08d1eb38f2eee453b51543188","hash":"629aad2ee2e564790e78cd46e99ad396544960ab","modified":1528992319523},{"_id":"themes/next/source/lib/pace/.git/objects/84/a17ac7b4fe9cea559de91f00af88f810bff7f1","hash":"b41b6d3cbccd75b711f0523bba1c26bf19b0a862","modified":1528992319516},{"_id":"themes/next/source/lib/pace/.git/objects/8b/b4535a79cc15127f8906b24c4e0bb4a38a5947","hash":"9c2d65a63f18929b09f3592dda064f24309ff98b","modified":1528992319524},{"_id":"themes/next/source/lib/pace/.git/objects/97/1e8a1f2ad6d45f693980c106af0aead9d1c215","hash":"e45f0963920a53a57f6b53d178e5b05a8e315189","modified":1528992319521},{"_id":"themes/next/source/lib/pace/.git/objects/9b/3058068409f2282607ebb91717d7a6a1406230","hash":"651c5857021e11dc397df86dbe0f01e6c7dc7f16","modified":1528992319524},{"_id":"themes/next/source/lib/pace/.git/objects/a6/dbd9c99e726f621e2bdcd3c6fe2795a5d4272d","hash":"25350dd31f504af7206610ced355d162aabda8dd","modified":1528992319525},{"_id":"themes/next/source/lib/pace/.git/objects/aa/813c5a6398600e01b740696cd889eb3becad84","hash":"c62a1513ca820dc59fe1cd6d9ec16c92e0e2fbf0","modified":1528992319520},{"_id":"themes/next/source/lib/pace/.git/objects/c0/05c71f1a000d8187df58083d215c962d7f5505","hash":"dffd212ca2ec705233fabe82a6f483d6be4b151d","modified":1528992319523},{"_id":"themes/next/source/lib/pace/.git/objects/de/79ab6539ac3702aaac64b879d95e6575f4eefa","hash":"0046fefd52ed4679e0fee757cc91ced94e3ddc12","modified":1528992319528},{"_id":"themes/next/source/lib/pace/.git/objects/f3/0e0a99bb016267bde55537dd47b3657ae59544","hash":"8bf0bc17a6111b6a82981073133f33cc8e815c41","modified":1528992319522},{"_id":"themes/next/source/lib/pace/.git/refs/heads/master","hash":"3190f62cf3c4f9eccb1e54c8f7289ed7e6955767","modified":1528992319537},{"_id":"themes/next/source/lib/pace/.git/logs/refs/heads/master","hash":"9a6ae168d72461586c00a4573f31b446e993fe62","modified":1528992319538},{"_id":"themes/next/source/lib/pace/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1528992319536},{"_id":"themes/next/source/lib/pace/.git/logs/refs/remotes/origin/HEAD","hash":"9a6ae168d72461586c00a4573f31b446e993fe62","modified":1528992319536},{"_id":"themes/next/.git/objects/pack/pack-f7de328b22271ee056739b70dddf40cae7c049c8.pack","hash":"41664a33911b2d0cbf46caadb151265a377e2414","modified":1528963428296}],"Category":[],"Data":[],"Page":[{"title":"About Me","date":"2018-04-11T08:24:59.000Z","_content":"\nI am a pragmatic idealist with passion in IT, photography, travel and teaching how to code.\n\n## Working Experience\n\n- JKOM Cloud Health Technology Co. Ltd., 2014 ~ Present, Technical Director\n\n## Education\n\n- Carnegie Mellon University, CS'14, M.S.\n- Nanjing University of Science And Technology, CS'12, B.S.\n\n## Languages That I Can Speak\n\n- Chinese (native speaker)\n- English (working proficiency)\n\n## Places That I've Travelled To\n\n- China: Nanjing (hometown), Hangzhou, Shanghai, Chongqing, Beijing ...\n- Thailand: Bangkok, Phuket\n- United States: Pittsburgh, NYC, Ithaca, Orlando, Key West, Bay Area, LA ...\n","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2018-04-11 16:24:59\n---\n\nI am a pragmatic idealist with passion in IT, photography, travel and teaching how to code.\n\n## Working Experience\n\n- JKOM Cloud Health Technology Co. Ltd., 2014 ~ Present, Technical Director\n\n## Education\n\n- Carnegie Mellon University, CS'14, M.S.\n- Nanjing University of Science And Technology, CS'12, B.S.\n\n## Languages That I Can Speak\n\n- Chinese (native speaker)\n- English (working proficiency)\n\n## Places That I've Travelled To\n\n- China: Nanjing (hometown), Hangzhou, Shanghai, Chongqing, Beijing ...\n- Thailand: Bangkok, Phuket\n- United States: Pittsburgh, NYC, Ithaca, Orlando, Key West, Bay Area, LA ...\n","updated":"2018-06-14T09:00:08.259Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjruakyxx0001l5sefejvr0yp","content":"<p>I am a pragmatic idealist with passion in IT, photography, travel and teaching how to code.</p>\n<h2 id=\"Working-Experience\"><a href=\"#Working-Experience\" class=\"headerlink\" title=\"Working Experience\"></a>Working Experience</h2><ul>\n<li>JKOM Cloud Health Technology Co. Ltd., 2014 ~ Present, Technical Director</li>\n</ul>\n<h2 id=\"Education\"><a href=\"#Education\" class=\"headerlink\" title=\"Education\"></a>Education</h2><ul>\n<li>Carnegie Mellon University, CS’14, M.S.</li>\n<li>Nanjing University of Science And Technology, CS’12, B.S.</li>\n</ul>\n<h2 id=\"Languages-That-I-Can-Speak\"><a href=\"#Languages-That-I-Can-Speak\" class=\"headerlink\" title=\"Languages That I Can Speak\"></a>Languages That I Can Speak</h2><ul>\n<li>Chinese (native speaker)</li>\n<li>English (working proficiency)</li>\n</ul>\n<h2 id=\"Places-That-I’ve-Travelled-To\"><a href=\"#Places-That-I’ve-Travelled-To\" class=\"headerlink\" title=\"Places That I’ve Travelled To\"></a>Places That I’ve Travelled To</h2><ul>\n<li>China: Nanjing (hometown), Hangzhou, Shanghai, Chongqing, Beijing …</li>\n<li>Thailand: Bangkok, Phuket</li>\n<li>United States: Pittsburgh, NYC, Ithaca, Orlando, Key West, Bay Area, LA …</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>I am a pragmatic idealist with passion in IT, photography, travel and teaching how to code.</p>\n<h2 id=\"Working-Experience\"><a href=\"#Working-Experience\" class=\"headerlink\" title=\"Working Experience\"></a>Working Experience</h2><ul>\n<li>JKOM Cloud Health Technology Co. Ltd., 2014 ~ Present, Technical Director</li>\n</ul>\n<h2 id=\"Education\"><a href=\"#Education\" class=\"headerlink\" title=\"Education\"></a>Education</h2><ul>\n<li>Carnegie Mellon University, CS’14, M.S.</li>\n<li>Nanjing University of Science And Technology, CS’12, B.S.</li>\n</ul>\n<h2 id=\"Languages-That-I-Can-Speak\"><a href=\"#Languages-That-I-Can-Speak\" class=\"headerlink\" title=\"Languages That I Can Speak\"></a>Languages That I Can Speak</h2><ul>\n<li>Chinese (native speaker)</li>\n<li>English (working proficiency)</li>\n</ul>\n<h2 id=\"Places-That-I’ve-Travelled-To\"><a href=\"#Places-That-I’ve-Travelled-To\" class=\"headerlink\" title=\"Places That I’ve Travelled To\"></a>Places That I’ve Travelled To</h2><ul>\n<li>China: Nanjing (hometown), Hangzhou, Shanghai, Chongqing, Beijing …</li>\n<li>Thailand: Bangkok, Phuket</li>\n<li>United States: Pittsburgh, NYC, Ithaca, Orlando, Key West, Bay Area, LA …</li>\n</ul>\n"},{"title":"{ L & C }","date":"2018-04-11T08:24:59.000Z","layout":"false","_content":"<!-- 😍😘😻💋👄💑👩‍❤️‍👩👨‍❤️‍👨💏👩‍❤️‍💋‍👩👨‍❤️‍💋‍💒❤️🧡💛💚💙💜💕💞💓💗💖💘💝 -->\n<head>\n<title>{ L & C }</title>\n<meta charset=\"UTF-8\">\n<meta name=\"description\" content=\"刘驰与陈易依的主页\">\n<meta name=\"author\" content=\"Chase Liu\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=2\">\n<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/images/apple-touch-icon.png?v=6.3.0\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/assets/img/favicon-32x32.png?v=6.3.0\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/assets/img/favicon-16x16.png?v=6.3.0\">\n<style type=\"text/css\">\n  body {\n    color: #7d8877;\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n    flex-flow: column;\n    background-color: #eae7d9;\n    font-family: American Typewriter, Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n  }\n  .trans {\n    font-size: 0.8rem;\n  }\n  .title {\n    font-size: 2em;\n  }\n  img {\n    display: block;\n    width: 90%;\n    max-width: 400px;\n  }\n  .clock {\n    width: 90%;\n    max-width: 500px;\n    border-radius: 0.312rem;\n    overflow: hidden;\n    display: flex;\n  }\n  .head {\n    color: #f7ead1;\n    background-color: #dca997;\n    font-size: 0.618rem;\n    line-height: 2;\n  }\n  .digits {\n    font-size: 2.5rem;\n    line-height: 2;\n    background-color: #f7ead1;\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n  }\n  .col {\n    text-align: center;\n  }\n  .col:nth-child(odd) {\n    flex: 1;\n  }\n</style>\n</head>\n\n<body>\n  <div class=\"title\">{ L & C }</div>\n  <!-- <p class=\"trans\" style=\"margin-top: -4.5em;\">刘&nbsp&nbsp驰&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp陈易依</p> -->\n  <img src=\"https://jkom-prc-public.oss-cn-shanghai.aliyuncs.com/jrisk/images/octocats-v3.png\"></img>\n  <div class=\"main\">I See You</div>\n  <div class=\"trans\">相遇 · 相识</div>\n  <div id=\"known-clock\" class=\"clock\">\n    <div class=\"col\">\n      <div class=\"head\">DAYS</div>\n      <div class=\"digits clock-days\"></div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">&nbsp;</div>\n      <div class=\"digits\">:</div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">HOURS</div>\n      <div class=\"digits clock-hours\"></div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">&nbsp;</div>\n      <div class=\"digits\">:</div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">MINUTES</div>\n      <div class=\"digits clock-minutes\">:</div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">&nbsp;</div>\n      <div class=\"digits\">:</div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">SECONDS</div>\n      <div class=\"digits clock-seconds\"></div>\n    </div>\n  </div>\n  <script src=\"https://cdn.bootcss.com/jquery/3.2.1/jquery.slim.min.js\"></script>\n  <script>\n    function clock(dom, ts, coundivown) {\n      var daysDom = $(dom + ' .clock-days');\n      var hoursDom = $(dom + ' .clock-hours');\n      var minutesDom = $(dom + ' .clock-minutes');\n      var secondsDom = $(dom + ' .clock-seconds');\n      function refresh() {\n        // var now = Date.now();\n        var diff = coundivown ? ts - Date.now() : Date.now() - ts;\n        var days = hours = minutes = seconds = 0;\n        if (diff > 0) {\n          days = parseInt(diff / 1000 / 60 / 60 / 24);\n          hours = parseInt(diff / 1000 / 60 / 60 % 24);\n          minutes = parseInt(diff / 1000 / 60 % 60);\n          seconds = parseInt(diff / 1000 % 60);\n        }\n        daysDom.text(days < 10 ? '0' + days : days);\n        hoursDom.text(hours < 10 ? '0' + hours : hours);\n        minutesDom.text(minutes < 10 ? '0' + minutes : minutes);\n        secondsDom.text(seconds < 10 ? '0' + seconds : seconds);\n      }\n      refresh();\n      return setInterval(refresh, 1000);\n    };\n    var knownTs = new Date('2016-02-17T11:00:00Z');\n    // var weddingTs = new Date('2018-09-16T10:08:00Z');\n    clock('#known-clock', knownTs);\n    // clock('#wedding-clock', weddingTs, true);\n  </script>\n</body>\n","source":"cnl/index.html","raw":"---\ntitle: \"{ L & C }\"\ndate: 2018-04-11 16:24:59\nlayout: false\n---\n<!-- 😍😘😻💋👄💑👩‍❤️‍👩👨‍❤️‍👨💏👩‍❤️‍💋‍👩👨‍❤️‍💋‍💒❤️🧡💛💚💙💜💕💞💓💗💖💘💝 -->\n<head>\n<title>{ L & C }</title>\n<meta charset=\"UTF-8\">\n<meta name=\"description\" content=\"刘驰与陈易依的主页\">\n<meta name=\"author\" content=\"Chase Liu\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=2\">\n<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/images/apple-touch-icon.png?v=6.3.0\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/assets/img/favicon-32x32.png?v=6.3.0\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/assets/img/favicon-16x16.png?v=6.3.0\">\n<style type=\"text/css\">\n  body {\n    color: #7d8877;\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n    flex-flow: column;\n    background-color: #eae7d9;\n    font-family: American Typewriter, Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n  }\n  .trans {\n    font-size: 0.8rem;\n  }\n  .title {\n    font-size: 2em;\n  }\n  img {\n    display: block;\n    width: 90%;\n    max-width: 400px;\n  }\n  .clock {\n    width: 90%;\n    max-width: 500px;\n    border-radius: 0.312rem;\n    overflow: hidden;\n    display: flex;\n  }\n  .head {\n    color: #f7ead1;\n    background-color: #dca997;\n    font-size: 0.618rem;\n    line-height: 2;\n  }\n  .digits {\n    font-size: 2.5rem;\n    line-height: 2;\n    background-color: #f7ead1;\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n  }\n  .col {\n    text-align: center;\n  }\n  .col:nth-child(odd) {\n    flex: 1;\n  }\n</style>\n</head>\n\n<body>\n  <div class=\"title\">{ L & C }</div>\n  <!-- <p class=\"trans\" style=\"margin-top: -4.5em;\">刘&nbsp&nbsp驰&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp陈易依</p> -->\n  <img src=\"https://jkom-prc-public.oss-cn-shanghai.aliyuncs.com/jrisk/images/octocats-v3.png\"></img>\n  <div class=\"main\">I See You</div>\n  <div class=\"trans\">相遇 · 相识</div>\n  <div id=\"known-clock\" class=\"clock\">\n    <div class=\"col\">\n      <div class=\"head\">DAYS</div>\n      <div class=\"digits clock-days\"></div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">&nbsp;</div>\n      <div class=\"digits\">:</div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">HOURS</div>\n      <div class=\"digits clock-hours\"></div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">&nbsp;</div>\n      <div class=\"digits\">:</div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">MINUTES</div>\n      <div class=\"digits clock-minutes\">:</div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">&nbsp;</div>\n      <div class=\"digits\">:</div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">SECONDS</div>\n      <div class=\"digits clock-seconds\"></div>\n    </div>\n  </div>\n  <script src=\"https://cdn.bootcss.com/jquery/3.2.1/jquery.slim.min.js\"></script>\n  <script>\n    function clock(dom, ts, coundivown) {\n      var daysDom = $(dom + ' .clock-days');\n      var hoursDom = $(dom + ' .clock-hours');\n      var minutesDom = $(dom + ' .clock-minutes');\n      var secondsDom = $(dom + ' .clock-seconds');\n      function refresh() {\n        // var now = Date.now();\n        var diff = coundivown ? ts - Date.now() : Date.now() - ts;\n        var days = hours = minutes = seconds = 0;\n        if (diff > 0) {\n          days = parseInt(diff / 1000 / 60 / 60 / 24);\n          hours = parseInt(diff / 1000 / 60 / 60 % 24);\n          minutes = parseInt(diff / 1000 / 60 % 60);\n          seconds = parseInt(diff / 1000 % 60);\n        }\n        daysDom.text(days < 10 ? '0' + days : days);\n        hoursDom.text(hours < 10 ? '0' + hours : hours);\n        minutesDom.text(minutes < 10 ? '0' + minutes : minutes);\n        secondsDom.text(seconds < 10 ? '0' + seconds : seconds);\n      }\n      refresh();\n      return setInterval(refresh, 1000);\n    };\n    var knownTs = new Date('2016-02-17T11:00:00Z');\n    // var weddingTs = new Date('2018-09-16T10:08:00Z');\n    clock('#known-clock', knownTs);\n    // clock('#wedding-clock', weddingTs, true);\n  </script>\n</body>\n","updated":"2019-02-07T07:19:23.683Z","path":"cnl/index.html","comments":1,"_id":"cjruakyy00003l5seme925zkr","content":"<!-- 😍😘😻💋👄💑👩‍❤️‍👩👨‍❤️‍👨💏👩‍❤️‍💋‍👩👨‍❤️‍💋‍💒❤️🧡💛💚💙💜💕💞💓💗💖💘💝 -->\n<head>\n<title>{ L & C }</title>\n<meta charset=\"UTF-8\">\n<meta name=\"description\" content=\"刘驰与陈易依的主页\">\n<meta name=\"author\" content=\"Chase Liu\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=2\">\n<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/images/apple-touch-icon.png?v=6.3.0\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/assets/img/favicon-32x32.png?v=6.3.0\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/assets/img/favicon-16x16.png?v=6.3.0\">\n<style type=\"text/css\">\n  body {\n    color: #7d8877;\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n    flex-flow: column;\n    background-color: #eae7d9;\n    font-family: American Typewriter, Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n  }\n  .trans {\n    font-size: 0.8rem;\n  }\n  .title {\n    font-size: 2em;\n  }\n  img {\n    display: block;\n    width: 90%;\n    max-width: 400px;\n  }\n  .clock {\n    width: 90%;\n    max-width: 500px;\n    border-radius: 0.312rem;\n    overflow: hidden;\n    display: flex;\n  }\n  .head {\n    color: #f7ead1;\n    background-color: #dca997;\n    font-size: 0.618rem;\n    line-height: 2;\n  }\n  .digits {\n    font-size: 2.5rem;\n    line-height: 2;\n    background-color: #f7ead1;\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n  }\n  .col {\n    text-align: center;\n  }\n  .col:nth-child(odd) {\n    flex: 1;\n  }\n</style>\n</head>\n\n<body>\n  <div class=\"title\">{ L & C }</div>\n  <!-- <p class=\"trans\" style=\"margin-top: -4.5em;\">刘&nbsp&nbsp驰&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp陈易依</p> -->\n  <img src=\"https://jkom-prc-public.oss-cn-shanghai.aliyuncs.com/jrisk/images/octocats-v3.png\">\n  <div class=\"main\">I See You</div>\n  <div class=\"trans\">相遇 · 相识</div>\n  <div id=\"known-clock\" class=\"clock\">\n    <div class=\"col\">\n      <div class=\"head\">DAYS</div>\n      <div class=\"digits clock-days\"></div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">&nbsp;</div>\n      <div class=\"digits\">:</div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">HOURS</div>\n      <div class=\"digits clock-hours\"></div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">&nbsp;</div>\n      <div class=\"digits\">:</div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">MINUTES</div>\n      <div class=\"digits clock-minutes\">:</div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">&nbsp;</div>\n      <div class=\"digits\">:</div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">SECONDS</div>\n      <div class=\"digits clock-seconds\"></div>\n    </div>\n  </div>\n  <script src=\"https://cdn.bootcss.com/jquery/3.2.1/jquery.slim.min.js\"></script>\n  <script>\n    function clock(dom, ts, coundivown) {\n      var daysDom = $(dom + ' .clock-days');\n      var hoursDom = $(dom + ' .clock-hours');\n      var minutesDom = $(dom + ' .clock-minutes');\n      var secondsDom = $(dom + ' .clock-seconds');\n      function refresh() {\n        // var now = Date.now();\n        var diff = coundivown ? ts - Date.now() : Date.now() - ts;\n        var days = hours = minutes = seconds = 0;\n        if (diff > 0) {\n          days = parseInt(diff / 1000 / 60 / 60 / 24);\n          hours = parseInt(diff / 1000 / 60 / 60 % 24);\n          minutes = parseInt(diff / 1000 / 60 % 60);\n          seconds = parseInt(diff / 1000 % 60);\n        }\n        daysDom.text(days < 10 ? '0' + days : days);\n        hoursDom.text(hours < 10 ? '0' + hours : hours);\n        minutesDom.text(minutes < 10 ? '0' + minutes : minutes);\n        secondsDom.text(seconds < 10 ? '0' + seconds : seconds);\n      }\n      refresh();\n      return setInterval(refresh, 1000);\n    };\n    var knownTs = new Date('2016-02-17T11:00:00Z');\n    // var weddingTs = new Date('2018-09-16T10:08:00Z');\n    clock('#known-clock', knownTs);\n    // clock('#wedding-clock', weddingTs, true);\n  </script>\n</body>\n","site":{"data":{}},"excerpt":"","more":"<!-- 😍😘😻💋👄💑👩‍❤️‍👩👨‍❤️‍👨💏👩‍❤️‍💋‍👩👨‍❤️‍💋‍💒❤️🧡💛💚💙💜💕💞💓💗💖💘💝 -->\n<head>\n<title>{ L & C }</title>\n<meta charset=\"UTF-8\">\n<meta name=\"description\" content=\"刘驰与陈易依的主页\">\n<meta name=\"author\" content=\"Chase Liu\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=2\">\n<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/images/apple-touch-icon.png?v=6.3.0\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/assets/img/favicon-32x32.png?v=6.3.0\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/assets/img/favicon-16x16.png?v=6.3.0\">\n<style type=\"text/css\">\n  body {\n    color: #7d8877;\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n    flex-flow: column;\n    background-color: #eae7d9;\n    font-family: American Typewriter, Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n  }\n  .trans {\n    font-size: 0.8rem;\n  }\n  .title {\n    font-size: 2em;\n  }\n  img {\n    display: block;\n    width: 90%;\n    max-width: 400px;\n  }\n  .clock {\n    width: 90%;\n    max-width: 500px;\n    border-radius: 0.312rem;\n    overflow: hidden;\n    display: flex;\n  }\n  .head {\n    color: #f7ead1;\n    background-color: #dca997;\n    font-size: 0.618rem;\n    line-height: 2;\n  }\n  .digits {\n    font-size: 2.5rem;\n    line-height: 2;\n    background-color: #f7ead1;\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n  }\n  .col {\n    text-align: center;\n  }\n  .col:nth-child(odd) {\n    flex: 1;\n  }\n</style>\n</head>\n\n<body>\n  <div class=\"title\">{ L & C }</div>\n  <!-- <p class=\"trans\" style=\"margin-top: -4.5em;\">刘&nbsp&nbsp驰&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp陈易依</p> -->\n  <img src=\"https://jkom-prc-public.oss-cn-shanghai.aliyuncs.com/jrisk/images/octocats-v3.png\">\n  <div class=\"main\">I See You</div>\n  <div class=\"trans\">相遇 · 相识</div>\n  <div id=\"known-clock\" class=\"clock\">\n    <div class=\"col\">\n      <div class=\"head\">DAYS</div>\n      <div class=\"digits clock-days\"></div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">&nbsp;</div>\n      <div class=\"digits\">:</div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">HOURS</div>\n      <div class=\"digits clock-hours\"></div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">&nbsp;</div>\n      <div class=\"digits\">:</div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">MINUTES</div>\n      <div class=\"digits clock-minutes\">:</div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">&nbsp;</div>\n      <div class=\"digits\">:</div>\n    </div>\n    <div class=\"col\">\n      <div class=\"head\">SECONDS</div>\n      <div class=\"digits clock-seconds\"></div>\n    </div>\n  </div>\n  <script src=\"https://cdn.bootcss.com/jquery/3.2.1/jquery.slim.min.js\"></script>\n  <script>\n    function clock(dom, ts, coundivown) {\n      var daysDom = $(dom + ' .clock-days');\n      var hoursDom = $(dom + ' .clock-hours');\n      var minutesDom = $(dom + ' .clock-minutes');\n      var secondsDom = $(dom + ' .clock-seconds');\n      function refresh() {\n        // var now = Date.now();\n        var diff = coundivown ? ts - Date.now() : Date.now() - ts;\n        var days = hours = minutes = seconds = 0;\n        if (diff > 0) {\n          days = parseInt(diff / 1000 / 60 / 60 / 24);\n          hours = parseInt(diff / 1000 / 60 / 60 % 24);\n          minutes = parseInt(diff / 1000 / 60 % 60);\n          seconds = parseInt(diff / 1000 % 60);\n        }\n        daysDom.text(days < 10 ? '0' + days : days);\n        hoursDom.text(hours < 10 ? '0' + hours : hours);\n        minutesDom.text(minutes < 10 ? '0' + minutes : minutes);\n        secondsDom.text(seconds < 10 ? '0' + seconds : seconds);\n      }\n      refresh();\n      return setInterval(refresh, 1000);\n    };\n    var knownTs = new Date('2016-02-17T11:00:00Z');\n    // var weddingTs = new Date('2018-09-16T10:08:00Z');\n    clock('#known-clock', knownTs);\n    // clock('#wedding-clock', weddingTs, true);\n  </script>\n</body>\n"},{"title":"Tags","date":"2018-06-14T08:45:25.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2018-06-14 16:45:25\ntype: tags\n---\n","updated":"2018-06-14T08:46:46.490Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjruakyy40006l5sehjkygnfb","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CentOS7中安装MongoDB","date":"2018-04-16T07:04:13.000Z","_content":"\n本文概述了自己在CentOS7操作系统的服务器上安装配置MongoDB的一些基本步骤，供读者参考。\n\n## 删除旧版本\n\n如果系统中已经装有旧版本，请重点关注以下步骤。如果没有旧版本可以直接跳过本章节。\n\n### Step 1: 配置文件备份\n\n一般当前的配置文件会存放在 `/etc/mongod.conf` 中。通过查阅该文件也可以定位数据文件和日志文件的存放位置。\n\n### Step 2: 数据文件备份\n\n备份，备份，备份！（重要的事情说三遍）。建议使用`mongodumps -o some_dir`命令来备份。由于导出的是`bson`文件，相比较`mongoexport`效率更高。\n\n### Step 3: 删除旧版本\n\n```bash\nyum remove mongodb-org\nyum autoremove\n```\n\n## 安装\n\n这里通过官方安装源安装，虽然速度慢，但步骤非常简洁。\n\n创建 `/etc/yum.repos.d/mongodb-org-3.6.repo` 文件，添加一下内容：\n\n```ini\n[mongodb-org-3.6]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.6/x86_64/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc\n```\n\n随后运行安装命令\n\n```bash\nyum install -y mongodb-org\n```\n\n<!-- more -->\n\n## 关闭SELinux\n\n之前在Azure的Ubuntu的服务器上好像没有遇到过这个问题。公司里的CentOS7镜像默认是 `enforcing` 模式。\n\n简单带各位回顾一下今早踩过的一个坑：\n\n同事之前帮忙部署了一台mongodb实例，数据文件是从之前一台已经弃用的服务器上scp拷贝过来的。我今天计划想把这台实例加固一下，首先就升级了系统然后reboot。没想到重启之后，mongodb的实例就没有自动启动起来。尝试使用 `systemctl start mongod` 就报错。追查到 `/var/log/mongodb/mongod.log` 中，就发现是访问磁盘路径时报了权限错误。这我就纳闷了，我只是重启了一下机器，怎么正常的启动脚本就失效了呢？\n\n- 尝试直接在root账户下运行 `mongod`，没问题\n- 检查数据文件路径，文件所有者和访问模式都没毛病\n- 卸载mongodb程序，删除所有配置，重新安装，还是不行\n- 删除数据文件，使用root账户运行 `mongod` 初始化数据文件，然后再 `chown -R mongod:mongod /data/db` 改文件所有者，还是不行\n\n很郁闷问题到底出在哪里了，也没有任何报错信息提示是 SELinux 造成。询问同事之前怎么安装的了，回答我说时间太久忘记了。。\n\n嗯之后网上搜索询问抓狂的细节我也不多说了。直奔结果，最终还是在 `StackOverflow` 上的一篇**未被采纳**的回答里找到了答案[原文地址](https://stackoverflow.com/questions/5973811/mongodb-data-directory-permissions)。恍然大悟一定是同事之前部署的时候没有在 `/etc/selinux/config` 中持久化配置。虽然我也不理解SELinux到底是怎么回事，简单起见这里建议关闭。在配置中修改：\n\n```ini\nSELINUX=disabled\n```\n\n修改完之后记得重启机器生效。重启后可以通过 `getenforce` 命令查看当前生效的模式。\n\n## 修改数据存储位置\n\nmongodb的默认存储位置是 `/var/lib/mongo`。通常这个路径的挂载位置是系统盘，数据盘我通常会挂在至 `/data` 目录。在 `/etc/mongod.conf` 中修改数据存储的路径。修改 `storage` 配置：\n\n```yaml\nstorage:\n  journal:\n    enabled: true\n  dbpath: /data/db\n```\n\n## 禁用THP\n\n> 原文地址：https://docs.mongodb.com/manual/tutorial/transparent-huge-pages/\n\n创建启动项： `/etc/init.d/disable-transparent-hugepages`\n\n```bash\n#!/bin/bash\n### BEGIN INIT INFO\n# Provides:          disable-transparent-hugepages\n# Required-Start:    $local_fs\n# Required-Stop:\n# X-Start-Before:    mongod mongodb-mms-automation-agent\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Disable Linux transparent huge pages\n# Description:       Disable Linux transparent huge pages, to improve\n#                    database performance.\n### END INIT INFO\n\ncase $1 in\n  start)\n    if [ -d /sys/kernel/mm/transparent_hugepage ]; then\n      thp_path=/sys/kernel/mm/transparent_hugepage\n    elif [ -d /sys/kernel/mm/redhat_transparent_hugepage ]; then\n      thp_path=/sys/kernel/mm/redhat_transparent_hugepage\n    else\n      return 0\n    fi\n\n    echo 'never' > ${thp_path}/enabled\n    echo 'never' > ${thp_path}/defrag\n\n    re='^[0-1]+$'\n    if [[ $(cat ${thp_path}/khugepaged/defrag) =~ $re ]]\n    then\n      # RHEL 7\n      echo 0  > ${thp_path}/khugepaged/defrag\n    else\n      # RHEL 6\n      echo 'no' > ${thp_path}/khugepaged/defrag\n    fi\n\n    unset re\n    unset thp_path\n    ;;\nesac\n```\n\n随后运行以下命令：\n\n```bash\nchmod 755 /etc/init.d/disable-transparent-hugepages\nchkconfig --add disable-transparent-hugepages\n```\n\n## 设置数据库用户\n\n> 原文地址：https://docs.mongodb.com/manual/tutorial/enable-authentication/\n\nmongodb装好默认是不开启auth的（鉴权authentication与访问授权authorization）。在配置文件中启用auth之前，需要先在默认的 `admin` 库中创建一个 `userAdminAnyDatabase` 角色的用户。该角色可以在任一库中创建用户，但不能对库本身进行操作。\n\n首先在后台启动实例：\n\n```bash\nsystemctl start mongod\n```\n\n随后使用mongo命令行登录，并用以下命令创建第一个用户：\n\n```javascript\nuse admin\ndb.createUser(\n  {\n    user: \"myUserAdmin\",\n    pwd: \"abc123\",\n    roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ]\n  }\n)\n```\n随后退出客户端。至此已具备开启auth的条件。重启服务后使用如下命令重新登录：\n\n```bash\nmongo -u \"myUserAdmin\" -p \"abc123\" --authenticationDatabase \"admin\"\n```\n\n然后新建其他用户：\n\n```javascript\nuse test\ndb.createUser(\n  {\n    user: \"myTester\",\n    pwd: \"xyz123\",\n    roles: [ { role: \"readWrite\", db: \"test\" },\n             { role: \"read\", db: \"reporting\" } ]\n  }\n)\n```\n\n> 注：mongodb的用户可以创建在任何一个库中，通过角色可以为其分配访问其他库的权限。但经实际测试，使用客户端登录时，登录的库必须是该用户所在的库，只能用use命令切换至其他库访问。这点比较奇怪，还待探明。\n\n## 大功告成\n\n最后一步，当然是设置开机自动启动服务啦。\n\n```bash\nsystemctl enable mongod\n```\n\n## 未完待续\n\n过段时间会继续补充mongodb集群模式的安装和配置。敬请期待！\n","source":"_posts/CentOS7中安装MongoDB.md","raw":"---\ntitle: CentOS7中安装MongoDB\ndate: 2018-04-16 15:04:13\ntags:\n  - database\n  - sysadmin\n  - mongodb\n---\n\n本文概述了自己在CentOS7操作系统的服务器上安装配置MongoDB的一些基本步骤，供读者参考。\n\n## 删除旧版本\n\n如果系统中已经装有旧版本，请重点关注以下步骤。如果没有旧版本可以直接跳过本章节。\n\n### Step 1: 配置文件备份\n\n一般当前的配置文件会存放在 `/etc/mongod.conf` 中。通过查阅该文件也可以定位数据文件和日志文件的存放位置。\n\n### Step 2: 数据文件备份\n\n备份，备份，备份！（重要的事情说三遍）。建议使用`mongodumps -o some_dir`命令来备份。由于导出的是`bson`文件，相比较`mongoexport`效率更高。\n\n### Step 3: 删除旧版本\n\n```bash\nyum remove mongodb-org\nyum autoremove\n```\n\n## 安装\n\n这里通过官方安装源安装，虽然速度慢，但步骤非常简洁。\n\n创建 `/etc/yum.repos.d/mongodb-org-3.6.repo` 文件，添加一下内容：\n\n```ini\n[mongodb-org-3.6]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.6/x86_64/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc\n```\n\n随后运行安装命令\n\n```bash\nyum install -y mongodb-org\n```\n\n<!-- more -->\n\n## 关闭SELinux\n\n之前在Azure的Ubuntu的服务器上好像没有遇到过这个问题。公司里的CentOS7镜像默认是 `enforcing` 模式。\n\n简单带各位回顾一下今早踩过的一个坑：\n\n同事之前帮忙部署了一台mongodb实例，数据文件是从之前一台已经弃用的服务器上scp拷贝过来的。我今天计划想把这台实例加固一下，首先就升级了系统然后reboot。没想到重启之后，mongodb的实例就没有自动启动起来。尝试使用 `systemctl start mongod` 就报错。追查到 `/var/log/mongodb/mongod.log` 中，就发现是访问磁盘路径时报了权限错误。这我就纳闷了，我只是重启了一下机器，怎么正常的启动脚本就失效了呢？\n\n- 尝试直接在root账户下运行 `mongod`，没问题\n- 检查数据文件路径，文件所有者和访问模式都没毛病\n- 卸载mongodb程序，删除所有配置，重新安装，还是不行\n- 删除数据文件，使用root账户运行 `mongod` 初始化数据文件，然后再 `chown -R mongod:mongod /data/db` 改文件所有者，还是不行\n\n很郁闷问题到底出在哪里了，也没有任何报错信息提示是 SELinux 造成。询问同事之前怎么安装的了，回答我说时间太久忘记了。。\n\n嗯之后网上搜索询问抓狂的细节我也不多说了。直奔结果，最终还是在 `StackOverflow` 上的一篇**未被采纳**的回答里找到了答案[原文地址](https://stackoverflow.com/questions/5973811/mongodb-data-directory-permissions)。恍然大悟一定是同事之前部署的时候没有在 `/etc/selinux/config` 中持久化配置。虽然我也不理解SELinux到底是怎么回事，简单起见这里建议关闭。在配置中修改：\n\n```ini\nSELINUX=disabled\n```\n\n修改完之后记得重启机器生效。重启后可以通过 `getenforce` 命令查看当前生效的模式。\n\n## 修改数据存储位置\n\nmongodb的默认存储位置是 `/var/lib/mongo`。通常这个路径的挂载位置是系统盘，数据盘我通常会挂在至 `/data` 目录。在 `/etc/mongod.conf` 中修改数据存储的路径。修改 `storage` 配置：\n\n```yaml\nstorage:\n  journal:\n    enabled: true\n  dbpath: /data/db\n```\n\n## 禁用THP\n\n> 原文地址：https://docs.mongodb.com/manual/tutorial/transparent-huge-pages/\n\n创建启动项： `/etc/init.d/disable-transparent-hugepages`\n\n```bash\n#!/bin/bash\n### BEGIN INIT INFO\n# Provides:          disable-transparent-hugepages\n# Required-Start:    $local_fs\n# Required-Stop:\n# X-Start-Before:    mongod mongodb-mms-automation-agent\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Disable Linux transparent huge pages\n# Description:       Disable Linux transparent huge pages, to improve\n#                    database performance.\n### END INIT INFO\n\ncase $1 in\n  start)\n    if [ -d /sys/kernel/mm/transparent_hugepage ]; then\n      thp_path=/sys/kernel/mm/transparent_hugepage\n    elif [ -d /sys/kernel/mm/redhat_transparent_hugepage ]; then\n      thp_path=/sys/kernel/mm/redhat_transparent_hugepage\n    else\n      return 0\n    fi\n\n    echo 'never' > ${thp_path}/enabled\n    echo 'never' > ${thp_path}/defrag\n\n    re='^[0-1]+$'\n    if [[ $(cat ${thp_path}/khugepaged/defrag) =~ $re ]]\n    then\n      # RHEL 7\n      echo 0  > ${thp_path}/khugepaged/defrag\n    else\n      # RHEL 6\n      echo 'no' > ${thp_path}/khugepaged/defrag\n    fi\n\n    unset re\n    unset thp_path\n    ;;\nesac\n```\n\n随后运行以下命令：\n\n```bash\nchmod 755 /etc/init.d/disable-transparent-hugepages\nchkconfig --add disable-transparent-hugepages\n```\n\n## 设置数据库用户\n\n> 原文地址：https://docs.mongodb.com/manual/tutorial/enable-authentication/\n\nmongodb装好默认是不开启auth的（鉴权authentication与访问授权authorization）。在配置文件中启用auth之前，需要先在默认的 `admin` 库中创建一个 `userAdminAnyDatabase` 角色的用户。该角色可以在任一库中创建用户，但不能对库本身进行操作。\n\n首先在后台启动实例：\n\n```bash\nsystemctl start mongod\n```\n\n随后使用mongo命令行登录，并用以下命令创建第一个用户：\n\n```javascript\nuse admin\ndb.createUser(\n  {\n    user: \"myUserAdmin\",\n    pwd: \"abc123\",\n    roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ]\n  }\n)\n```\n随后退出客户端。至此已具备开启auth的条件。重启服务后使用如下命令重新登录：\n\n```bash\nmongo -u \"myUserAdmin\" -p \"abc123\" --authenticationDatabase \"admin\"\n```\n\n然后新建其他用户：\n\n```javascript\nuse test\ndb.createUser(\n  {\n    user: \"myTester\",\n    pwd: \"xyz123\",\n    roles: [ { role: \"readWrite\", db: \"test\" },\n             { role: \"read\", db: \"reporting\" } ]\n  }\n)\n```\n\n> 注：mongodb的用户可以创建在任何一个库中，通过角色可以为其分配访问其他库的权限。但经实际测试，使用客户端登录时，登录的库必须是该用户所在的库，只能用use命令切换至其他库访问。这点比较奇怪，还待探明。\n\n## 大功告成\n\n最后一步，当然是设置开机自动启动服务啦。\n\n```bash\nsystemctl enable mongod\n```\n\n## 未完待续\n\n过段时间会继续补充mongodb集群模式的安装和配置。敬请期待！\n","slug":"CentOS7中安装MongoDB","published":1,"updated":"2018-06-14T09:00:08.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjruakyxr0000l5sewhltgh3i","content":"<p>本文概述了自己在CentOS7操作系统的服务器上安装配置MongoDB的一些基本步骤，供读者参考。</p>\n<h2 id=\"删除旧版本\"><a href=\"#删除旧版本\" class=\"headerlink\" title=\"删除旧版本\"></a>删除旧版本</h2><p>如果系统中已经装有旧版本，请重点关注以下步骤。如果没有旧版本可以直接跳过本章节。</p>\n<h3 id=\"Step-1-配置文件备份\"><a href=\"#Step-1-配置文件备份\" class=\"headerlink\" title=\"Step 1: 配置文件备份\"></a>Step 1: 配置文件备份</h3><p>一般当前的配置文件会存放在 <code>/etc/mongod.conf</code> 中。通过查阅该文件也可以定位数据文件和日志文件的存放位置。</p>\n<h3 id=\"Step-2-数据文件备份\"><a href=\"#Step-2-数据文件备份\" class=\"headerlink\" title=\"Step 2: 数据文件备份\"></a>Step 2: 数据文件备份</h3><p>备份，备份，备份！（重要的事情说三遍）。建议使用<code>mongodumps -o some_dir</code>命令来备份。由于导出的是<code>bson</code>文件，相比较<code>mongoexport</code>效率更高。</p>\n<h3 id=\"Step-3-删除旧版本\"><a href=\"#Step-3-删除旧版本\" class=\"headerlink\" title=\"Step 3: 删除旧版本\"></a>Step 3: 删除旧版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove mongodb-org</span><br><span class=\"line\">yum autoremove</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>这里通过官方安装源安装，虽然速度慢，但步骤非常简洁。</p>\n<p>创建 <code>/etc/yum.repos.d/mongodb-org-3.6.repo</code> 文件，添加一下内容：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[mongodb-org-3.6]</span></span><br><span class=\"line\"><span class=\"attr\">name</span>=MongoDB Repository</span><br><span class=\"line\"><span class=\"attr\">baseurl</span>=https://repo.mongodb.org/yum/redhat/<span class=\"variable\">$releasever</span>/mongodb-org/<span class=\"number\">3.6</span>/x<span class=\"number\">86_64</span>/</span><br><span class=\"line\"><span class=\"attr\">gpgcheck</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">enabled</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">gpgkey</span>=https://www.mongodb.org/static/pgp/server-<span class=\"number\">3.6</span>.asc</span><br></pre></td></tr></table></figure>\n<p>随后运行安装命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y mongodb-org</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"关闭SELinux\"><a href=\"#关闭SELinux\" class=\"headerlink\" title=\"关闭SELinux\"></a>关闭SELinux</h2><p>之前在Azure的Ubuntu的服务器上好像没有遇到过这个问题。公司里的CentOS7镜像默认是 <code>enforcing</code> 模式。</p>\n<p>简单带各位回顾一下今早踩过的一个坑：</p>\n<p>同事之前帮忙部署了一台mongodb实例，数据文件是从之前一台已经弃用的服务器上scp拷贝过来的。我今天计划想把这台实例加固一下，首先就升级了系统然后reboot。没想到重启之后，mongodb的实例就没有自动启动起来。尝试使用 <code>systemctl start mongod</code> 就报错。追查到 <code>/var/log/mongodb/mongod.log</code> 中，就发现是访问磁盘路径时报了权限错误。这我就纳闷了，我只是重启了一下机器，怎么正常的启动脚本就失效了呢？</p>\n<ul>\n<li>尝试直接在root账户下运行 <code>mongod</code>，没问题</li>\n<li>检查数据文件路径，文件所有者和访问模式都没毛病</li>\n<li>卸载mongodb程序，删除所有配置，重新安装，还是不行</li>\n<li>删除数据文件，使用root账户运行 <code>mongod</code> 初始化数据文件，然后再 <code>chown -R mongod:mongod /data/db</code> 改文件所有者，还是不行</li>\n</ul>\n<p>很郁闷问题到底出在哪里了，也没有任何报错信息提示是 SELinux 造成。询问同事之前怎么安装的了，回答我说时间太久忘记了。。</p>\n<p>嗯之后网上搜索询问抓狂的细节我也不多说了。直奔结果，最终还是在 <code>StackOverflow</code> 上的一篇<strong>未被采纳</strong>的回答里找到了答案<a href=\"https://stackoverflow.com/questions/5973811/mongodb-data-directory-permissions\" target=\"_blank\" rel=\"noopener\">原文地址</a>。恍然大悟一定是同事之前部署的时候没有在 <code>/etc/selinux/config</code> 中持久化配置。虽然我也不理解SELinux到底是怎么回事，简单起见这里建议关闭。在配置中修改：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">SELINUX</span>=disabled</span><br></pre></td></tr></table></figure>\n<p>修改完之后记得重启机器生效。重启后可以通过 <code>getenforce</code> 命令查看当前生效的模式。</p>\n<h2 id=\"修改数据存储位置\"><a href=\"#修改数据存储位置\" class=\"headerlink\" title=\"修改数据存储位置\"></a>修改数据存储位置</h2><p>mongodb的默认存储位置是 <code>/var/lib/mongo</code>。通常这个路径的挂载位置是系统盘，数据盘我通常会挂在至 <code>/data</code> 目录。在 <code>/etc/mongod.conf</code> 中修改数据存储的路径。修改 <code>storage</code> 配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">storage:</span></span><br><span class=\"line\"><span class=\"attr\">  journal:</span></span><br><span class=\"line\"><span class=\"attr\">    enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  dbpath:</span> <span class=\"string\">/data/db</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"禁用THP\"><a href=\"#禁用THP\" class=\"headerlink\" title=\"禁用THP\"></a>禁用THP</h2><blockquote>\n<p>原文地址：<a href=\"https://docs.mongodb.com/manual/tutorial/transparent-huge-pages/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/tutorial/transparent-huge-pages/</a></p>\n</blockquote>\n<p>创建启动项： <code>/etc/init.d/disable-transparent-hugepages</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">### BEGIN INIT INFO</span></span><br><span class=\"line\"><span class=\"comment\"># Provides:          disable-transparent-hugepages</span></span><br><span class=\"line\"><span class=\"comment\"># Required-Start:    $local_fs</span></span><br><span class=\"line\"><span class=\"comment\"># Required-Stop:</span></span><br><span class=\"line\"><span class=\"comment\"># X-Start-Before:    mongod mongodb-mms-automation-agent</span></span><br><span class=\"line\"><span class=\"comment\"># Default-Start:     2 3 4 5</span></span><br><span class=\"line\"><span class=\"comment\"># Default-Stop:      0 1 6</span></span><br><span class=\"line\"><span class=\"comment\"># Short-Description: Disable Linux transparent huge pages</span></span><br><span class=\"line\"><span class=\"comment\"># Description:       Disable Linux transparent huge pages, to improve</span></span><br><span class=\"line\"><span class=\"comment\">#                    database performance.</span></span><br><span class=\"line\"><span class=\"comment\">### END INIT INFO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  start)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -d /sys/kernel/mm/transparent_hugepage ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">      thp_path=/sys/kernel/mm/transparent_hugepage</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> [ -d /sys/kernel/mm/redhat_transparent_hugepage ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">      thp_path=/sys/kernel/mm/redhat_transparent_hugepage</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"built_in\">return</span> 0</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'never'</span> &gt; <span class=\"variable\">$&#123;thp_path&#125;</span>/enabled</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'never'</span> &gt; <span class=\"variable\">$&#123;thp_path&#125;</span>/defrag</span><br><span class=\"line\"></span><br><span class=\"line\">    re=<span class=\"string\">'^[0-1]+$'</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ $(cat <span class=\"variable\">$&#123;thp_path&#125;</span>/khugepaged/defrag) =~ <span class=\"variable\">$re</span> ]]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"comment\"># RHEL 7</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> 0  &gt; <span class=\"variable\">$&#123;thp_path&#125;</span>/khugepaged/defrag</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"comment\"># RHEL 6</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">'no'</span> &gt; <span class=\"variable\">$&#123;thp_path&#125;</span>/khugepaged/defrag</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">unset</span> re</span><br><span class=\"line\">    <span class=\"built_in\">unset</span> thp_path</span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n<p>随后运行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 755 /etc/init.d/<span class=\"built_in\">disable</span>-transparent-hugepages</span><br><span class=\"line\">chkconfig --add <span class=\"built_in\">disable</span>-transparent-hugepages</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置数据库用户\"><a href=\"#设置数据库用户\" class=\"headerlink\" title=\"设置数据库用户\"></a>设置数据库用户</h2><blockquote>\n<p>原文地址：<a href=\"https://docs.mongodb.com/manual/tutorial/enable-authentication/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/tutorial/enable-authentication/</a></p>\n</blockquote>\n<p>mongodb装好默认是不开启auth的（鉴权authentication与访问授权authorization）。在配置文件中启用auth之前，需要先在默认的 <code>admin</code> 库中创建一个 <code>userAdminAnyDatabase</code> 角色的用户。该角色可以在任一库中创建用户，但不能对库本身进行操作。</p>\n<p>首先在后台启动实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mongod</span><br></pre></td></tr></table></figure>\n<p>随后使用mongo命令行登录，并用以下命令创建第一个用户：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use admin</span><br><span class=\"line\">db.createUser(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    user: <span class=\"string\">\"myUserAdmin\"</span>,</span><br><span class=\"line\">    pwd: <span class=\"string\">\"abc123\"</span>,</span><br><span class=\"line\">    roles: [ &#123; <span class=\"attr\">role</span>: <span class=\"string\">\"userAdminAnyDatabase\"</span>, <span class=\"attr\">db</span>: <span class=\"string\">\"admin\"</span> &#125; ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>随后退出客户端。至此已具备开启auth的条件。重启服务后使用如下命令重新登录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo -u <span class=\"string\">\"myUserAdmin\"</span> -p <span class=\"string\">\"abc123\"</span> --authenticationDatabase <span class=\"string\">\"admin\"</span></span><br></pre></td></tr></table></figure>\n<p>然后新建其他用户：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use test</span><br><span class=\"line\">db.createUser(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    user: <span class=\"string\">\"myTester\"</span>,</span><br><span class=\"line\">    pwd: <span class=\"string\">\"xyz123\"</span>,</span><br><span class=\"line\">    roles: [ &#123; <span class=\"attr\">role</span>: <span class=\"string\">\"readWrite\"</span>, <span class=\"attr\">db</span>: <span class=\"string\">\"test\"</span> &#125;,</span><br><span class=\"line\">             &#123; <span class=\"attr\">role</span>: <span class=\"string\">\"read\"</span>, <span class=\"attr\">db</span>: <span class=\"string\">\"reporting\"</span> &#125; ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：mongodb的用户可以创建在任何一个库中，通过角色可以为其分配访问其他库的权限。但经实际测试，使用客户端登录时，登录的库必须是该用户所在的库，只能用use命令切换至其他库访问。这点比较奇怪，还待探明。</p>\n</blockquote>\n<h2 id=\"大功告成\"><a href=\"#大功告成\" class=\"headerlink\" title=\"大功告成\"></a>大功告成</h2><p>最后一步，当然是设置开机自动启动服务啦。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> mongod</span><br></pre></td></tr></table></figure>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><p>过段时间会继续补充mongodb集群模式的安装和配置。敬请期待！</p>\n","site":{"data":{}},"excerpt":"<p>本文概述了自己在CentOS7操作系统的服务器上安装配置MongoDB的一些基本步骤，供读者参考。</p>\n<h2 id=\"删除旧版本\"><a href=\"#删除旧版本\" class=\"headerlink\" title=\"删除旧版本\"></a>删除旧版本</h2><p>如果系统中已经装有旧版本，请重点关注以下步骤。如果没有旧版本可以直接跳过本章节。</p>\n<h3 id=\"Step-1-配置文件备份\"><a href=\"#Step-1-配置文件备份\" class=\"headerlink\" title=\"Step 1: 配置文件备份\"></a>Step 1: 配置文件备份</h3><p>一般当前的配置文件会存放在 <code>/etc/mongod.conf</code> 中。通过查阅该文件也可以定位数据文件和日志文件的存放位置。</p>\n<h3 id=\"Step-2-数据文件备份\"><a href=\"#Step-2-数据文件备份\" class=\"headerlink\" title=\"Step 2: 数据文件备份\"></a>Step 2: 数据文件备份</h3><p>备份，备份，备份！（重要的事情说三遍）。建议使用<code>mongodumps -o some_dir</code>命令来备份。由于导出的是<code>bson</code>文件，相比较<code>mongoexport</code>效率更高。</p>\n<h3 id=\"Step-3-删除旧版本\"><a href=\"#Step-3-删除旧版本\" class=\"headerlink\" title=\"Step 3: 删除旧版本\"></a>Step 3: 删除旧版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove mongodb-org</span><br><span class=\"line\">yum autoremove</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>这里通过官方安装源安装，虽然速度慢，但步骤非常简洁。</p>\n<p>创建 <code>/etc/yum.repos.d/mongodb-org-3.6.repo</code> 文件，添加一下内容：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[mongodb-org-3.6]</span></span><br><span class=\"line\"><span class=\"attr\">name</span>=MongoDB Repository</span><br><span class=\"line\"><span class=\"attr\">baseurl</span>=https://repo.mongodb.org/yum/redhat/<span class=\"variable\">$releasever</span>/mongodb-org/<span class=\"number\">3.6</span>/x<span class=\"number\">86_64</span>/</span><br><span class=\"line\"><span class=\"attr\">gpgcheck</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">enabled</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">gpgkey</span>=https://www.mongodb.org/static/pgp/server-<span class=\"number\">3.6</span>.asc</span><br></pre></td></tr></table></figure>\n<p>随后运行安装命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y mongodb-org</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"关闭SELinux\"><a href=\"#关闭SELinux\" class=\"headerlink\" title=\"关闭SELinux\"></a>关闭SELinux</h2><p>之前在Azure的Ubuntu的服务器上好像没有遇到过这个问题。公司里的CentOS7镜像默认是 <code>enforcing</code> 模式。</p>\n<p>简单带各位回顾一下今早踩过的一个坑：</p>\n<p>同事之前帮忙部署了一台mongodb实例，数据文件是从之前一台已经弃用的服务器上scp拷贝过来的。我今天计划想把这台实例加固一下，首先就升级了系统然后reboot。没想到重启之后，mongodb的实例就没有自动启动起来。尝试使用 <code>systemctl start mongod</code> 就报错。追查到 <code>/var/log/mongodb/mongod.log</code> 中，就发现是访问磁盘路径时报了权限错误。这我就纳闷了，我只是重启了一下机器，怎么正常的启动脚本就失效了呢？</p>\n<ul>\n<li>尝试直接在root账户下运行 <code>mongod</code>，没问题</li>\n<li>检查数据文件路径，文件所有者和访问模式都没毛病</li>\n<li>卸载mongodb程序，删除所有配置，重新安装，还是不行</li>\n<li>删除数据文件，使用root账户运行 <code>mongod</code> 初始化数据文件，然后再 <code>chown -R mongod:mongod /data/db</code> 改文件所有者，还是不行</li>\n</ul>\n<p>很郁闷问题到底出在哪里了，也没有任何报错信息提示是 SELinux 造成。询问同事之前怎么安装的了，回答我说时间太久忘记了。。</p>\n<p>嗯之后网上搜索询问抓狂的细节我也不多说了。直奔结果，最终还是在 <code>StackOverflow</code> 上的一篇<strong>未被采纳</strong>的回答里找到了答案<a href=\"https://stackoverflow.com/questions/5973811/mongodb-data-directory-permissions\" target=\"_blank\" rel=\"noopener\">原文地址</a>。恍然大悟一定是同事之前部署的时候没有在 <code>/etc/selinux/config</code> 中持久化配置。虽然我也不理解SELinux到底是怎么回事，简单起见这里建议关闭。在配置中修改：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">SELINUX</span>=disabled</span><br></pre></td></tr></table></figure>\n<p>修改完之后记得重启机器生效。重启后可以通过 <code>getenforce</code> 命令查看当前生效的模式。</p>\n<h2 id=\"修改数据存储位置\"><a href=\"#修改数据存储位置\" class=\"headerlink\" title=\"修改数据存储位置\"></a>修改数据存储位置</h2><p>mongodb的默认存储位置是 <code>/var/lib/mongo</code>。通常这个路径的挂载位置是系统盘，数据盘我通常会挂在至 <code>/data</code> 目录。在 <code>/etc/mongod.conf</code> 中修改数据存储的路径。修改 <code>storage</code> 配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">storage:</span></span><br><span class=\"line\"><span class=\"attr\">  journal:</span></span><br><span class=\"line\"><span class=\"attr\">    enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  dbpath:</span> <span class=\"string\">/data/db</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"禁用THP\"><a href=\"#禁用THP\" class=\"headerlink\" title=\"禁用THP\"></a>禁用THP</h2><blockquote>\n<p>原文地址：<a href=\"https://docs.mongodb.com/manual/tutorial/transparent-huge-pages/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/tutorial/transparent-huge-pages/</a></p>\n</blockquote>\n<p>创建启动项： <code>/etc/init.d/disable-transparent-hugepages</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">### BEGIN INIT INFO</span></span><br><span class=\"line\"><span class=\"comment\"># Provides:          disable-transparent-hugepages</span></span><br><span class=\"line\"><span class=\"comment\"># Required-Start:    $local_fs</span></span><br><span class=\"line\"><span class=\"comment\"># Required-Stop:</span></span><br><span class=\"line\"><span class=\"comment\"># X-Start-Before:    mongod mongodb-mms-automation-agent</span></span><br><span class=\"line\"><span class=\"comment\"># Default-Start:     2 3 4 5</span></span><br><span class=\"line\"><span class=\"comment\"># Default-Stop:      0 1 6</span></span><br><span class=\"line\"><span class=\"comment\"># Short-Description: Disable Linux transparent huge pages</span></span><br><span class=\"line\"><span class=\"comment\"># Description:       Disable Linux transparent huge pages, to improve</span></span><br><span class=\"line\"><span class=\"comment\">#                    database performance.</span></span><br><span class=\"line\"><span class=\"comment\">### END INIT INFO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  start)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -d /sys/kernel/mm/transparent_hugepage ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">      thp_path=/sys/kernel/mm/transparent_hugepage</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> [ -d /sys/kernel/mm/redhat_transparent_hugepage ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">      thp_path=/sys/kernel/mm/redhat_transparent_hugepage</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"built_in\">return</span> 0</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'never'</span> &gt; <span class=\"variable\">$&#123;thp_path&#125;</span>/enabled</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'never'</span> &gt; <span class=\"variable\">$&#123;thp_path&#125;</span>/defrag</span><br><span class=\"line\"></span><br><span class=\"line\">    re=<span class=\"string\">'^[0-1]+$'</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ $(cat <span class=\"variable\">$&#123;thp_path&#125;</span>/khugepaged/defrag) =~ <span class=\"variable\">$re</span> ]]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"comment\"># RHEL 7</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> 0  &gt; <span class=\"variable\">$&#123;thp_path&#125;</span>/khugepaged/defrag</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"comment\"># RHEL 6</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">'no'</span> &gt; <span class=\"variable\">$&#123;thp_path&#125;</span>/khugepaged/defrag</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">unset</span> re</span><br><span class=\"line\">    <span class=\"built_in\">unset</span> thp_path</span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n<p>随后运行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 755 /etc/init.d/<span class=\"built_in\">disable</span>-transparent-hugepages</span><br><span class=\"line\">chkconfig --add <span class=\"built_in\">disable</span>-transparent-hugepages</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置数据库用户\"><a href=\"#设置数据库用户\" class=\"headerlink\" title=\"设置数据库用户\"></a>设置数据库用户</h2><blockquote>\n<p>原文地址：<a href=\"https://docs.mongodb.com/manual/tutorial/enable-authentication/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/tutorial/enable-authentication/</a></p>\n</blockquote>\n<p>mongodb装好默认是不开启auth的（鉴权authentication与访问授权authorization）。在配置文件中启用auth之前，需要先在默认的 <code>admin</code> 库中创建一个 <code>userAdminAnyDatabase</code> 角色的用户。该角色可以在任一库中创建用户，但不能对库本身进行操作。</p>\n<p>首先在后台启动实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mongod</span><br></pre></td></tr></table></figure>\n<p>随后使用mongo命令行登录，并用以下命令创建第一个用户：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use admin</span><br><span class=\"line\">db.createUser(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    user: <span class=\"string\">\"myUserAdmin\"</span>,</span><br><span class=\"line\">    pwd: <span class=\"string\">\"abc123\"</span>,</span><br><span class=\"line\">    roles: [ &#123; <span class=\"attr\">role</span>: <span class=\"string\">\"userAdminAnyDatabase\"</span>, <span class=\"attr\">db</span>: <span class=\"string\">\"admin\"</span> &#125; ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>随后退出客户端。至此已具备开启auth的条件。重启服务后使用如下命令重新登录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo -u <span class=\"string\">\"myUserAdmin\"</span> -p <span class=\"string\">\"abc123\"</span> --authenticationDatabase <span class=\"string\">\"admin\"</span></span><br></pre></td></tr></table></figure>\n<p>然后新建其他用户：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use test</span><br><span class=\"line\">db.createUser(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    user: <span class=\"string\">\"myTester\"</span>,</span><br><span class=\"line\">    pwd: <span class=\"string\">\"xyz123\"</span>,</span><br><span class=\"line\">    roles: [ &#123; <span class=\"attr\">role</span>: <span class=\"string\">\"readWrite\"</span>, <span class=\"attr\">db</span>: <span class=\"string\">\"test\"</span> &#125;,</span><br><span class=\"line\">             &#123; <span class=\"attr\">role</span>: <span class=\"string\">\"read\"</span>, <span class=\"attr\">db</span>: <span class=\"string\">\"reporting\"</span> &#125; ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：mongodb的用户可以创建在任何一个库中，通过角色可以为其分配访问其他库的权限。但经实际测试，使用客户端登录时，登录的库必须是该用户所在的库，只能用use命令切换至其他库访问。这点比较奇怪，还待探明。</p>\n</blockquote>\n<h2 id=\"大功告成\"><a href=\"#大功告成\" class=\"headerlink\" title=\"大功告成\"></a>大功告成</h2><p>最后一步，当然是设置开机自动启动服务啦。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> mongod</span><br></pre></td></tr></table></figure>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><p>过段时间会继续补充mongodb集群模式的安装和配置。敬请期待！</p>"},{"title":"IPTables HowTos","date":"2018-04-11T07:46:04.000Z","_content":"\nThis article describes basic usage of linux iptables.\n\n<!-- more -->\n\n## Sources\n\n1. [CentOS HowTos][1]\n1. [DigitalOcean iptables][2]\n\n## List Rules\n\n```bash\nsudo iptables --list -n --line-numbers\n\n# --list: or -L, list rules\n# -n: use port number instead of protocol name\n# --line-numbers: add ID numbers to the rules for further operations, e.g. deleting\n\n# A sample output (172.20.20.207, as of 20171221):\n\nChain INPUT (policy DROP)\nnum  target     prot opt source               destination\n1    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0\n2    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:22\n3    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:21\n4    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:80\n5    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:443\n6    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3030\n7    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:6379\n8    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8080\n9    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3000\n10   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3001\n11   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8090\n12   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8091\n13   ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0            icmptype 8\n14   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5672\n15   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:15672\n16   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:6677\n17   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:6682\n18   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:6680\n19   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5678\n20   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5001\n21   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:6683\n22   ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED\n23   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:4242\n24   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5005\n25   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5006\n26   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5000\n27   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3307\n28   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3308\n29   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:15672\n30   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5672\n\nChain FORWARD (policy DROP)\nnum  target     prot opt source               destination\n\nChain OUTPUT (policy ACCEPT)\nnum  target     prot opt source               destination\n```\n\nTo show packet counts and aggregate size in the INPUT chain:\n\n```bash\nsudo iptables -L INPUT -v\n```\n\n## Delete Rules\n\n```bash\n# delete a single rule in the INPUT chain\nsudo iptables -D INPUT 3\n\n# flush all rules in the INPUT chain\nsudo iptables -F INPUT\n\n# flush all chains\nsudo iptables -F\n```\n\n## Chains\n\n- INPUT - All packets destined for the host computer.\n- OUTPUT - All packets originating from the host computer.\n- FORWARD - All packets neither destined for nor originating from the host computer, but passing through (routed by) the host computer. This chain is used if you are using your computer as a router.\n\n## Default Policy\n\n- DROP: if no ACCEPT rules are set, drop all packages\n- ACCEPT: if no DROP rules are set, accept all packages\n\n## CLI Walktrhough\n\n```bash\niptables -P INPUT ACCEPT\niptables -F\niptables -A INPUT -i lo -j ACCEPT\niptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\niptables -A INPUT -p tcp --dport 22 -j ACCEPT\niptables -P INPUT DROP\niptables -P FORWARD DROP\niptables -P OUTPUT ACCEPT\n```\n\nExplanation:\n\n1. **iptables -P INPUT ACCEPT** If connecting remotely we must first temporarily set the default policy on the INPUT chain to ACCEPT otherwise once we flush the current rules we will be locked out of our server.\n1. **iptables -F** We used the -F switch to flush all existing rules so we start with a clean state from which to add new rules.\n1. **iptables -A INPUT -i lo -j ACCEPT** Now it's time to start adding some rules. We use the -A switch to append (or add) a rule to a specific chain, the INPUT chain in this instance. Then we use the -i switch (for interface) to specify packets matching or destined for the lo (localhost, 127.0.0.1) interface and finally -j (jump) to the target action for packets matching the rule - in this case ACCEPT. So this rule will allow all incoming packets destined for the localhost interface to be accepted. This is generally required as many software applications expect to be able to communicate with the localhost adaptor.\n1. **iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT** This is the rule that does most of the work, and again we are adding (-A) it to the INPUT chain. Here we're using the -m switch to load a module (state). The state module is able to examine the state of a packet and determine if it is NEW, ESTABLISHED or RELATED. NEW refers to incoming packets that are new incoming connections that weren't initiated by the host system. ESTABLISHED and RELATED refers to incoming packets that are part of an already established connection or related to and already established connection.\n1. **iptables -A INPUT -p tcp --dport 22 -j ACCEPT** Here we add a rule allowing SSH connections over tcp port 22. This is to prevent accidental lockouts when working on remote systems over an SSH connection. We will explain this rule in more detail later.\n1. **iptables -P INPUT DROP** The -P switch sets the default policy on the specified chain. So now we can set the default policy on the INPUT chain to DROP. This means that if an incoming packet does not match one of the following rules it will be dropped. If we were connecting remotely via SSH and had not added the rule above, we would have just locked ourself out of the system at this point.\n1. **iptables -P FORWARD DROP** Similarly, here we've set the default policy on the FORWARD chain to DROP as we're not using our computer as a router so there should not be any packets passing through our computer.\n1. **iptables -P OUTPUT ACCEPT** and finally, we've set the default policy on the OUTPUT chain to ACCEPT as we want to allow all outgoing traffic (as we trust our users).\n1. **iptables -L -v** Finally, we can list (-L) the rules we've just added to check they've been loaded correctly.\n\nFinally:\n\n```bash\nsudo /sbin/service iptables save\n```\n\n## Executable script\n\nOpen a text editor:\n\n```bash\n#!/bin/bash\n#\n# iptables example configuration script\n#\n# Flush all current rules from iptables\n#\niptables -F\n#\n# Allow SSH connections on tcp port 22\n# This is essential when working on remote servers via SSH to prevent locking yourself out of the system\n#\niptables -A INPUT -p tcp --dport 22 -j ACCEPT\n#\n# Set default policies for INPUT, FORWARD and OUTPUT chains\n#\niptables -P INPUT DROP\niptables -P FORWARD DROP\niptables -P OUTPUT ACCEPT\n#\n# Set access for localhost\n#\niptables -A INPUT -i lo -j ACCEPT\n#\n# Accept packets belonging to established and related connections\n#\niptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n#\n# Save settings\n#\n/sbin/service iptables save\n#\n# List rules\n#\niptables -L -v\n```\n\nSave the script then make it executable:\n\n```bash\nchmod +x myfirewall\n```\n\n<!-- reference links -->\n[1]: <https://wiki.centos.org/HowTos/Network/IPTables>\n[2]: <https://www.digitalocean.com/community/tutorials/how-to-list-and-delete-iptables-firewall-rules>\n","source":"_posts/IPTables-HowTos.md","raw":"---\ntitle: IPTables HowTos\ndate: 2018-04-11 15:46:04\ntags:\n  - sysadmin\n  - iptables\n---\n\nThis article describes basic usage of linux iptables.\n\n<!-- more -->\n\n## Sources\n\n1. [CentOS HowTos][1]\n1. [DigitalOcean iptables][2]\n\n## List Rules\n\n```bash\nsudo iptables --list -n --line-numbers\n\n# --list: or -L, list rules\n# -n: use port number instead of protocol name\n# --line-numbers: add ID numbers to the rules for further operations, e.g. deleting\n\n# A sample output (172.20.20.207, as of 20171221):\n\nChain INPUT (policy DROP)\nnum  target     prot opt source               destination\n1    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0\n2    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:22\n3    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:21\n4    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:80\n5    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:443\n6    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3030\n7    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:6379\n8    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8080\n9    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3000\n10   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3001\n11   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8090\n12   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8091\n13   ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0            icmptype 8\n14   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5672\n15   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:15672\n16   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:6677\n17   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:6682\n18   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:6680\n19   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5678\n20   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5001\n21   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:6683\n22   ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED\n23   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:4242\n24   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5005\n25   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5006\n26   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5000\n27   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3307\n28   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3308\n29   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:15672\n30   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5672\n\nChain FORWARD (policy DROP)\nnum  target     prot opt source               destination\n\nChain OUTPUT (policy ACCEPT)\nnum  target     prot opt source               destination\n```\n\nTo show packet counts and aggregate size in the INPUT chain:\n\n```bash\nsudo iptables -L INPUT -v\n```\n\n## Delete Rules\n\n```bash\n# delete a single rule in the INPUT chain\nsudo iptables -D INPUT 3\n\n# flush all rules in the INPUT chain\nsudo iptables -F INPUT\n\n# flush all chains\nsudo iptables -F\n```\n\n## Chains\n\n- INPUT - All packets destined for the host computer.\n- OUTPUT - All packets originating from the host computer.\n- FORWARD - All packets neither destined for nor originating from the host computer, but passing through (routed by) the host computer. This chain is used if you are using your computer as a router.\n\n## Default Policy\n\n- DROP: if no ACCEPT rules are set, drop all packages\n- ACCEPT: if no DROP rules are set, accept all packages\n\n## CLI Walktrhough\n\n```bash\niptables -P INPUT ACCEPT\niptables -F\niptables -A INPUT -i lo -j ACCEPT\niptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\niptables -A INPUT -p tcp --dport 22 -j ACCEPT\niptables -P INPUT DROP\niptables -P FORWARD DROP\niptables -P OUTPUT ACCEPT\n```\n\nExplanation:\n\n1. **iptables -P INPUT ACCEPT** If connecting remotely we must first temporarily set the default policy on the INPUT chain to ACCEPT otherwise once we flush the current rules we will be locked out of our server.\n1. **iptables -F** We used the -F switch to flush all existing rules so we start with a clean state from which to add new rules.\n1. **iptables -A INPUT -i lo -j ACCEPT** Now it's time to start adding some rules. We use the -A switch to append (or add) a rule to a specific chain, the INPUT chain in this instance. Then we use the -i switch (for interface) to specify packets matching or destined for the lo (localhost, 127.0.0.1) interface and finally -j (jump) to the target action for packets matching the rule - in this case ACCEPT. So this rule will allow all incoming packets destined for the localhost interface to be accepted. This is generally required as many software applications expect to be able to communicate with the localhost adaptor.\n1. **iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT** This is the rule that does most of the work, and again we are adding (-A) it to the INPUT chain. Here we're using the -m switch to load a module (state). The state module is able to examine the state of a packet and determine if it is NEW, ESTABLISHED or RELATED. NEW refers to incoming packets that are new incoming connections that weren't initiated by the host system. ESTABLISHED and RELATED refers to incoming packets that are part of an already established connection or related to and already established connection.\n1. **iptables -A INPUT -p tcp --dport 22 -j ACCEPT** Here we add a rule allowing SSH connections over tcp port 22. This is to prevent accidental lockouts when working on remote systems over an SSH connection. We will explain this rule in more detail later.\n1. **iptables -P INPUT DROP** The -P switch sets the default policy on the specified chain. So now we can set the default policy on the INPUT chain to DROP. This means that if an incoming packet does not match one of the following rules it will be dropped. If we were connecting remotely via SSH and had not added the rule above, we would have just locked ourself out of the system at this point.\n1. **iptables -P FORWARD DROP** Similarly, here we've set the default policy on the FORWARD chain to DROP as we're not using our computer as a router so there should not be any packets passing through our computer.\n1. **iptables -P OUTPUT ACCEPT** and finally, we've set the default policy on the OUTPUT chain to ACCEPT as we want to allow all outgoing traffic (as we trust our users).\n1. **iptables -L -v** Finally, we can list (-L) the rules we've just added to check they've been loaded correctly.\n\nFinally:\n\n```bash\nsudo /sbin/service iptables save\n```\n\n## Executable script\n\nOpen a text editor:\n\n```bash\n#!/bin/bash\n#\n# iptables example configuration script\n#\n# Flush all current rules from iptables\n#\niptables -F\n#\n# Allow SSH connections on tcp port 22\n# This is essential when working on remote servers via SSH to prevent locking yourself out of the system\n#\niptables -A INPUT -p tcp --dport 22 -j ACCEPT\n#\n# Set default policies for INPUT, FORWARD and OUTPUT chains\n#\niptables -P INPUT DROP\niptables -P FORWARD DROP\niptables -P OUTPUT ACCEPT\n#\n# Set access for localhost\n#\niptables -A INPUT -i lo -j ACCEPT\n#\n# Accept packets belonging to established and related connections\n#\niptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n#\n# Save settings\n#\n/sbin/service iptables save\n#\n# List rules\n#\niptables -L -v\n```\n\nSave the script then make it executable:\n\n```bash\nchmod +x myfirewall\n```\n\n<!-- reference links -->\n[1]: <https://wiki.centos.org/HowTos/Network/IPTables>\n[2]: <https://www.digitalocean.com/community/tutorials/how-to-list-and-delete-iptables-firewall-rules>\n","slug":"IPTables-HowTos","published":1,"updated":"2018-06-14T09:00:08.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjruakyxy0002l5se753fbrri","content":"<p>This article describes basic usage of linux iptables.</p>\n<a id=\"more\"></a>\n<h2 id=\"Sources\"><a href=\"#Sources\" class=\"headerlink\" title=\"Sources\"></a>Sources</h2><ol>\n<li><a href=\"https://wiki.centos.org/HowTos/Network/IPTables\" target=\"_blank\" rel=\"noopener\">CentOS HowTos</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-list-and-delete-iptables-firewall-rules\" target=\"_blank\" rel=\"noopener\">DigitalOcean iptables</a></li>\n</ol>\n<h2 id=\"List-Rules\"><a href=\"#List-Rules\" class=\"headerlink\" title=\"List Rules\"></a>List Rules</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables --list -n --line-numbers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># --list: or -L, list rules</span></span><br><span class=\"line\"><span class=\"comment\"># -n: use port number instead of protocol name</span></span><br><span class=\"line\"><span class=\"comment\"># --line-numbers: add ID numbers to the rules for further operations, e.g. deleting</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># A sample output (172.20.20.207, as of 20171221):</span></span><br><span class=\"line\"></span><br><span class=\"line\">Chain INPUT (policy DROP)</span><br><span class=\"line\">num  target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\">1    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class=\"line\">2    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:22</span><br><span class=\"line\">3    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:21</span><br><span class=\"line\">4    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:80</span><br><span class=\"line\">5    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:443</span><br><span class=\"line\">6    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3030</span><br><span class=\"line\">7    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:6379</span><br><span class=\"line\">8    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8080</span><br><span class=\"line\">9    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3000</span><br><span class=\"line\">10   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3001</span><br><span class=\"line\">11   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8090</span><br><span class=\"line\">12   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8091</span><br><span class=\"line\">13   ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0            icmptype 8</span><br><span class=\"line\">14   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5672</span><br><span class=\"line\">15   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:15672</span><br><span class=\"line\">16   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:6677</span><br><span class=\"line\">17   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:6682</span><br><span class=\"line\">18   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:6680</span><br><span class=\"line\">19   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5678</span><br><span class=\"line\">20   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5001</span><br><span class=\"line\">21   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:6683</span><br><span class=\"line\">22   ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED</span><br><span class=\"line\">23   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:4242</span><br><span class=\"line\">24   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5005</span><br><span class=\"line\">25   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5006</span><br><span class=\"line\">26   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5000</span><br><span class=\"line\">27   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3307</span><br><span class=\"line\">28   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3308</span><br><span class=\"line\">29   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:15672</span><br><span class=\"line\">30   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5672</span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy DROP)</span><br><span class=\"line\">num  target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT)</span><br><span class=\"line\">num  target     prot opt <span class=\"built_in\">source</span>               destination</span><br></pre></td></tr></table></figure>\n<p>To show packet counts and aggregate size in the INPUT chain:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -L INPUT -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"Delete-Rules\"><a href=\"#Delete-Rules\" class=\"headerlink\" title=\"Delete Rules\"></a>Delete Rules</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># delete a single rule in the INPUT chain</span></span><br><span class=\"line\">sudo iptables -D INPUT 3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># flush all rules in the INPUT chain</span></span><br><span class=\"line\">sudo iptables -F INPUT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># flush all chains</span></span><br><span class=\"line\">sudo iptables -F</span><br></pre></td></tr></table></figure>\n<h2 id=\"Chains\"><a href=\"#Chains\" class=\"headerlink\" title=\"Chains\"></a>Chains</h2><ul>\n<li>INPUT - All packets destined for the host computer.</li>\n<li>OUTPUT - All packets originating from the host computer.</li>\n<li>FORWARD - All packets neither destined for nor originating from the host computer, but passing through (routed by) the host computer. This chain is used if you are using your computer as a router.</li>\n</ul>\n<h2 id=\"Default-Policy\"><a href=\"#Default-Policy\" class=\"headerlink\" title=\"Default Policy\"></a>Default Policy</h2><ul>\n<li>DROP: if no ACCEPT rules are set, drop all packages</li>\n<li>ACCEPT: if no DROP rules are set, accept all packages</li>\n</ul>\n<h2 id=\"CLI-Walktrhough\"><a href=\"#CLI-Walktrhough\" class=\"headerlink\" title=\"CLI Walktrhough\"></a>CLI Walktrhough</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -P INPUT ACCEPT</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">iptables -A INPUT -i lo -j ACCEPT</span><br><span class=\"line\">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class=\"line\">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">iptables -P INPUT DROP</span><br><span class=\"line\">iptables -P FORWARD DROP</span><br><span class=\"line\">iptables -P OUTPUT ACCEPT</span><br></pre></td></tr></table></figure>\n<p>Explanation:</p>\n<ol>\n<li><strong>iptables -P INPUT ACCEPT</strong> If connecting remotely we must first temporarily set the default policy on the INPUT chain to ACCEPT otherwise once we flush the current rules we will be locked out of our server.</li>\n<li><strong>iptables -F</strong> We used the -F switch to flush all existing rules so we start with a clean state from which to add new rules.</li>\n<li><strong>iptables -A INPUT -i lo -j ACCEPT</strong> Now it’s time to start adding some rules. We use the -A switch to append (or add) a rule to a specific chain, the INPUT chain in this instance. Then we use the -i switch (for interface) to specify packets matching or destined for the lo (localhost, 127.0.0.1) interface and finally -j (jump) to the target action for packets matching the rule - in this case ACCEPT. So this rule will allow all incoming packets destined for the localhost interface to be accepted. This is generally required as many software applications expect to be able to communicate with the localhost adaptor.</li>\n<li><strong>iptables -A INPUT -m state –state ESTABLISHED,RELATED -j ACCEPT</strong> This is the rule that does most of the work, and again we are adding (-A) it to the INPUT chain. Here we’re using the -m switch to load a module (state). The state module is able to examine the state of a packet and determine if it is NEW, ESTABLISHED or RELATED. NEW refers to incoming packets that are new incoming connections that weren’t initiated by the host system. ESTABLISHED and RELATED refers to incoming packets that are part of an already established connection or related to and already established connection.</li>\n<li><strong>iptables -A INPUT -p tcp –dport 22 -j ACCEPT</strong> Here we add a rule allowing SSH connections over tcp port 22. This is to prevent accidental lockouts when working on remote systems over an SSH connection. We will explain this rule in more detail later.</li>\n<li><strong>iptables -P INPUT DROP</strong> The -P switch sets the default policy on the specified chain. So now we can set the default policy on the INPUT chain to DROP. This means that if an incoming packet does not match one of the following rules it will be dropped. If we were connecting remotely via SSH and had not added the rule above, we would have just locked ourself out of the system at this point.</li>\n<li><strong>iptables -P FORWARD DROP</strong> Similarly, here we’ve set the default policy on the FORWARD chain to DROP as we’re not using our computer as a router so there should not be any packets passing through our computer.</li>\n<li><strong>iptables -P OUTPUT ACCEPT</strong> and finally, we’ve set the default policy on the OUTPUT chain to ACCEPT as we want to allow all outgoing traffic (as we trust our users).</li>\n<li><strong>iptables -L -v</strong> Finally, we can list (-L) the rules we’ve just added to check they’ve been loaded correctly.</li>\n</ol>\n<p>Finally:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /sbin/service iptables save</span><br></pre></td></tr></table></figure>\n<h2 id=\"Executable-script\"><a href=\"#Executable-script\" class=\"headerlink\" title=\"Executable script\"></a>Executable script</h2><p>Open a text editor:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># iptables example configuration script</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Flush all current rules from iptables</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">iptables -F</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Allow SSH connections on tcp port 22</span></span><br><span class=\"line\"><span class=\"comment\"># This is essential when working on remote servers via SSH to prevent locking yourself out of the system</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Set default policies for INPUT, FORWARD and OUTPUT chains</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">iptables -P INPUT DROP</span><br><span class=\"line\">iptables -P FORWARD DROP</span><br><span class=\"line\">iptables -P OUTPUT ACCEPT</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Set access for localhost</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">iptables -A INPUT -i lo -j ACCEPT</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Accept packets belonging to established and related connections</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Save settings</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">/sbin/service iptables save</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># List rules</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">iptables -L -v</span><br></pre></td></tr></table></figure>\n<p>Save the script then make it executable:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x myfirewall</span><br></pre></td></tr></table></figure>\n<!-- reference links -->\n","site":{"data":{}},"excerpt":"<p>This article describes basic usage of linux iptables.</p>","more":"<h2 id=\"Sources\"><a href=\"#Sources\" class=\"headerlink\" title=\"Sources\"></a>Sources</h2><ol>\n<li><a href=\"https://wiki.centos.org/HowTos/Network/IPTables\" target=\"_blank\" rel=\"noopener\">CentOS HowTos</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-list-and-delete-iptables-firewall-rules\" target=\"_blank\" rel=\"noopener\">DigitalOcean iptables</a></li>\n</ol>\n<h2 id=\"List-Rules\"><a href=\"#List-Rules\" class=\"headerlink\" title=\"List Rules\"></a>List Rules</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables --list -n --line-numbers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># --list: or -L, list rules</span></span><br><span class=\"line\"><span class=\"comment\"># -n: use port number instead of protocol name</span></span><br><span class=\"line\"><span class=\"comment\"># --line-numbers: add ID numbers to the rules for further operations, e.g. deleting</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># A sample output (172.20.20.207, as of 20171221):</span></span><br><span class=\"line\"></span><br><span class=\"line\">Chain INPUT (policy DROP)</span><br><span class=\"line\">num  target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\">1    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class=\"line\">2    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:22</span><br><span class=\"line\">3    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:21</span><br><span class=\"line\">4    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:80</span><br><span class=\"line\">5    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:443</span><br><span class=\"line\">6    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3030</span><br><span class=\"line\">7    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:6379</span><br><span class=\"line\">8    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8080</span><br><span class=\"line\">9    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3000</span><br><span class=\"line\">10   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3001</span><br><span class=\"line\">11   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8090</span><br><span class=\"line\">12   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8091</span><br><span class=\"line\">13   ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0            icmptype 8</span><br><span class=\"line\">14   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5672</span><br><span class=\"line\">15   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:15672</span><br><span class=\"line\">16   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:6677</span><br><span class=\"line\">17   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:6682</span><br><span class=\"line\">18   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:6680</span><br><span class=\"line\">19   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5678</span><br><span class=\"line\">20   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5001</span><br><span class=\"line\">21   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:6683</span><br><span class=\"line\">22   ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED</span><br><span class=\"line\">23   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:4242</span><br><span class=\"line\">24   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5005</span><br><span class=\"line\">25   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5006</span><br><span class=\"line\">26   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5000</span><br><span class=\"line\">27   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3307</span><br><span class=\"line\">28   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3308</span><br><span class=\"line\">29   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:15672</span><br><span class=\"line\">30   ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5672</span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy DROP)</span><br><span class=\"line\">num  target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT)</span><br><span class=\"line\">num  target     prot opt <span class=\"built_in\">source</span>               destination</span><br></pre></td></tr></table></figure>\n<p>To show packet counts and aggregate size in the INPUT chain:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -L INPUT -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"Delete-Rules\"><a href=\"#Delete-Rules\" class=\"headerlink\" title=\"Delete Rules\"></a>Delete Rules</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># delete a single rule in the INPUT chain</span></span><br><span class=\"line\">sudo iptables -D INPUT 3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># flush all rules in the INPUT chain</span></span><br><span class=\"line\">sudo iptables -F INPUT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># flush all chains</span></span><br><span class=\"line\">sudo iptables -F</span><br></pre></td></tr></table></figure>\n<h2 id=\"Chains\"><a href=\"#Chains\" class=\"headerlink\" title=\"Chains\"></a>Chains</h2><ul>\n<li>INPUT - All packets destined for the host computer.</li>\n<li>OUTPUT - All packets originating from the host computer.</li>\n<li>FORWARD - All packets neither destined for nor originating from the host computer, but passing through (routed by) the host computer. This chain is used if you are using your computer as a router.</li>\n</ul>\n<h2 id=\"Default-Policy\"><a href=\"#Default-Policy\" class=\"headerlink\" title=\"Default Policy\"></a>Default Policy</h2><ul>\n<li>DROP: if no ACCEPT rules are set, drop all packages</li>\n<li>ACCEPT: if no DROP rules are set, accept all packages</li>\n</ul>\n<h2 id=\"CLI-Walktrhough\"><a href=\"#CLI-Walktrhough\" class=\"headerlink\" title=\"CLI Walktrhough\"></a>CLI Walktrhough</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -P INPUT ACCEPT</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">iptables -A INPUT -i lo -j ACCEPT</span><br><span class=\"line\">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class=\"line\">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">iptables -P INPUT DROP</span><br><span class=\"line\">iptables -P FORWARD DROP</span><br><span class=\"line\">iptables -P OUTPUT ACCEPT</span><br></pre></td></tr></table></figure>\n<p>Explanation:</p>\n<ol>\n<li><strong>iptables -P INPUT ACCEPT</strong> If connecting remotely we must first temporarily set the default policy on the INPUT chain to ACCEPT otherwise once we flush the current rules we will be locked out of our server.</li>\n<li><strong>iptables -F</strong> We used the -F switch to flush all existing rules so we start with a clean state from which to add new rules.</li>\n<li><strong>iptables -A INPUT -i lo -j ACCEPT</strong> Now it’s time to start adding some rules. We use the -A switch to append (or add) a rule to a specific chain, the INPUT chain in this instance. Then we use the -i switch (for interface) to specify packets matching or destined for the lo (localhost, 127.0.0.1) interface and finally -j (jump) to the target action for packets matching the rule - in this case ACCEPT. So this rule will allow all incoming packets destined for the localhost interface to be accepted. This is generally required as many software applications expect to be able to communicate with the localhost adaptor.</li>\n<li><strong>iptables -A INPUT -m state –state ESTABLISHED,RELATED -j ACCEPT</strong> This is the rule that does most of the work, and again we are adding (-A) it to the INPUT chain. Here we’re using the -m switch to load a module (state). The state module is able to examine the state of a packet and determine if it is NEW, ESTABLISHED or RELATED. NEW refers to incoming packets that are new incoming connections that weren’t initiated by the host system. ESTABLISHED and RELATED refers to incoming packets that are part of an already established connection or related to and already established connection.</li>\n<li><strong>iptables -A INPUT -p tcp –dport 22 -j ACCEPT</strong> Here we add a rule allowing SSH connections over tcp port 22. This is to prevent accidental lockouts when working on remote systems over an SSH connection. We will explain this rule in more detail later.</li>\n<li><strong>iptables -P INPUT DROP</strong> The -P switch sets the default policy on the specified chain. So now we can set the default policy on the INPUT chain to DROP. This means that if an incoming packet does not match one of the following rules it will be dropped. If we were connecting remotely via SSH and had not added the rule above, we would have just locked ourself out of the system at this point.</li>\n<li><strong>iptables -P FORWARD DROP</strong> Similarly, here we’ve set the default policy on the FORWARD chain to DROP as we’re not using our computer as a router so there should not be any packets passing through our computer.</li>\n<li><strong>iptables -P OUTPUT ACCEPT</strong> and finally, we’ve set the default policy on the OUTPUT chain to ACCEPT as we want to allow all outgoing traffic (as we trust our users).</li>\n<li><strong>iptables -L -v</strong> Finally, we can list (-L) the rules we’ve just added to check they’ve been loaded correctly.</li>\n</ol>\n<p>Finally:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /sbin/service iptables save</span><br></pre></td></tr></table></figure>\n<h2 id=\"Executable-script\"><a href=\"#Executable-script\" class=\"headerlink\" title=\"Executable script\"></a>Executable script</h2><p>Open a text editor:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># iptables example configuration script</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Flush all current rules from iptables</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">iptables -F</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Allow SSH connections on tcp port 22</span></span><br><span class=\"line\"><span class=\"comment\"># This is essential when working on remote servers via SSH to prevent locking yourself out of the system</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Set default policies for INPUT, FORWARD and OUTPUT chains</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">iptables -P INPUT DROP</span><br><span class=\"line\">iptables -P FORWARD DROP</span><br><span class=\"line\">iptables -P OUTPUT ACCEPT</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Set access for localhost</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">iptables -A INPUT -i lo -j ACCEPT</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Accept packets belonging to established and related connections</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Save settings</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">/sbin/service iptables save</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># List rules</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">iptables -L -v</span><br></pre></td></tr></table></figure>\n<p>Save the script then make it executable:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x myfirewall</span><br></pre></td></tr></table></figure>\n<!-- reference links -->"},{"title":"JKOM CentOS VM Setup","date":"2018-04-11T07:45:54.000Z","_content":"\nThis article describes the steps of initiating a CentOS VM normally used with JKOM's private network.\n\nHere are the technical requirements:\n\n- create user `jk` with root privilage\n- disable `root` login from remote\n- disable firewall as it's in local network\n- dev-tools such as git\n- python 3.6\n- node 8.9.3\n\n<!-- more -->\n\n## Basics\n\n```bash\nssh root@server_ip_address\n```\n\n### Fix locale warning\n\n```bash\nsudo vim /etc/environment\n\n# add these lines...\n\nLANG=en_US.utf-8\nLC_ALL=en_US.utf-8\n```\n\nre-login\n\n### Package update\n\n```bash\nyum update\n```\n\n### Disable firewall\n\n```bash\nsystemctl stop firewalld.service\nsystemctl disable firewalld.service\n```\n\n### add user:jk with sudo permission\n\n```bash\nadduser jk\npasswd jk\nusermod -aG wheel jk\n```\n\n### disable root login\n\n```bash\nsudo yum install vim\nsudo vim /etc/ssh/sshd_config\n\nPermitRootLogin no\nPubkeyAuthentication yes\n\nsudo service sshd restart\n```\n\nre-login with `ssh jk@server_ip_address`\n\n### PubKey login\n\n```bash\nssh-keygen -t rsa\ncd\nvim .ssh/authorized_keys\nchmod 600 .ssh/authorized_keys\n\n```\n\n### Install oh-my-zsh\n\n```bash\nsudo yum install zsh\nsudo yum install git\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n## Code Env\n\n### Python3\n\n```bash\nsudo yum -y update\nsudo yum -y install yum-utils\nsudo yum -y groupinstall development\nsudo yum -y install https://centos7.iuscommunity.org/ius-release.rpm\nsudo yum -y install python36u\nsudo yum -y install python36u-pip\nsudo yum -y install python36u-devel\n\ncd\nmkdir .pip\nvim .pip/pip.conf\n\n# add the following config\n[global]\nindex-url = https://mirrors.ustc.edu.cn/pypi/web/simple\nformat = columns\n```\n\n### Nodejs\n\n```bash\ncd\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\n\n# re-login\n\nnvm install 8.9.3\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\ncnpm install -g pm2\nsudo env PATH=$PATH:/home/jk/.nvm/versions/node/v8.9.3/bin /home/jk/.nvm/versions/node/v8.9.3/lib/node_modules/pm2/bin/pm2 startup systemd -u jk --hp /home/jk\n```\n\n### ODBC Driver\n\n[reference](https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-SQL-Server-from-RHEL-6-or-Centos-7)\n\n```bash\nsudo su\ncurl https://packages.microsoft.com/config/rhel/6/prod.repo > /etc/yum.repos.d/mssql-release.repo\nexit\nsudo yum remove unixODBC-utf16 unixODBC-utf16-devel\nsudo ACCEPT_EULA=Y yum install msodbcsql\nsudo yum install unixODBC-devel  # required by pyodbc\n```\n\n### ZeroMQ\n\n```bash\nsudo yum -y install zeromq\nsudo yum -y install zeromq-devel  # required by zerorpc\n```\n","source":"_posts/JKOM-CentOS-VM-Setup.md","raw":"---\ntitle: JKOM CentOS VM Setup\ndate: 2018-04-11 15:45:54\ntags:\n  - centos\n  - sysadmin\n  - jkom\n---\n\nThis article describes the steps of initiating a CentOS VM normally used with JKOM's private network.\n\nHere are the technical requirements:\n\n- create user `jk` with root privilage\n- disable `root` login from remote\n- disable firewall as it's in local network\n- dev-tools such as git\n- python 3.6\n- node 8.9.3\n\n<!-- more -->\n\n## Basics\n\n```bash\nssh root@server_ip_address\n```\n\n### Fix locale warning\n\n```bash\nsudo vim /etc/environment\n\n# add these lines...\n\nLANG=en_US.utf-8\nLC_ALL=en_US.utf-8\n```\n\nre-login\n\n### Package update\n\n```bash\nyum update\n```\n\n### Disable firewall\n\n```bash\nsystemctl stop firewalld.service\nsystemctl disable firewalld.service\n```\n\n### add user:jk with sudo permission\n\n```bash\nadduser jk\npasswd jk\nusermod -aG wheel jk\n```\n\n### disable root login\n\n```bash\nsudo yum install vim\nsudo vim /etc/ssh/sshd_config\n\nPermitRootLogin no\nPubkeyAuthentication yes\n\nsudo service sshd restart\n```\n\nre-login with `ssh jk@server_ip_address`\n\n### PubKey login\n\n```bash\nssh-keygen -t rsa\ncd\nvim .ssh/authorized_keys\nchmod 600 .ssh/authorized_keys\n\n```\n\n### Install oh-my-zsh\n\n```bash\nsudo yum install zsh\nsudo yum install git\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n## Code Env\n\n### Python3\n\n```bash\nsudo yum -y update\nsudo yum -y install yum-utils\nsudo yum -y groupinstall development\nsudo yum -y install https://centos7.iuscommunity.org/ius-release.rpm\nsudo yum -y install python36u\nsudo yum -y install python36u-pip\nsudo yum -y install python36u-devel\n\ncd\nmkdir .pip\nvim .pip/pip.conf\n\n# add the following config\n[global]\nindex-url = https://mirrors.ustc.edu.cn/pypi/web/simple\nformat = columns\n```\n\n### Nodejs\n\n```bash\ncd\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\n\n# re-login\n\nnvm install 8.9.3\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\ncnpm install -g pm2\nsudo env PATH=$PATH:/home/jk/.nvm/versions/node/v8.9.3/bin /home/jk/.nvm/versions/node/v8.9.3/lib/node_modules/pm2/bin/pm2 startup systemd -u jk --hp /home/jk\n```\n\n### ODBC Driver\n\n[reference](https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-SQL-Server-from-RHEL-6-or-Centos-7)\n\n```bash\nsudo su\ncurl https://packages.microsoft.com/config/rhel/6/prod.repo > /etc/yum.repos.d/mssql-release.repo\nexit\nsudo yum remove unixODBC-utf16 unixODBC-utf16-devel\nsudo ACCEPT_EULA=Y yum install msodbcsql\nsudo yum install unixODBC-devel  # required by pyodbc\n```\n\n### ZeroMQ\n\n```bash\nsudo yum -y install zeromq\nsudo yum -y install zeromq-devel  # required by zerorpc\n```\n","slug":"JKOM-CentOS-VM-Setup","published":1,"updated":"2018-06-14T09:00:08.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjruakyy30005l5se7zgwe94a","content":"<p>This article describes the steps of initiating a CentOS VM normally used with JKOM’s private network.</p>\n<p>Here are the technical requirements:</p>\n<ul>\n<li>create user <code>jk</code> with root privilage</li>\n<li>disable <code>root</code> login from remote</li>\n<li>disable firewall as it’s in local network</li>\n<li>dev-tools such as git</li>\n<li>python 3.6</li>\n<li>node 8.9.3</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"Basics\"><a href=\"#Basics\" class=\"headerlink\" title=\"Basics\"></a>Basics</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@server_ip_address</span><br></pre></td></tr></table></figure>\n<h3 id=\"Fix-locale-warning\"><a href=\"#Fix-locale-warning\" class=\"headerlink\" title=\"Fix locale warning\"></a>Fix locale warning</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/environment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add these lines...</span></span><br><span class=\"line\"></span><br><span class=\"line\">LANG=en_US.utf-8</span><br><span class=\"line\">LC_ALL=en_US.utf-8</span><br></pre></td></tr></table></figure>\n<p>re-login</p>\n<h3 id=\"Package-update\"><a href=\"#Package-update\" class=\"headerlink\" title=\"Package update\"></a>Package update</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br></pre></td></tr></table></figure>\n<h3 id=\"Disable-firewall\"><a href=\"#Disable-firewall\" class=\"headerlink\" title=\"Disable firewall\"></a>Disable firewall</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld.service</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld.service</span><br></pre></td></tr></table></figure>\n<h3 id=\"add-user-jk-with-sudo-permission\"><a href=\"#add-user-jk-with-sudo-permission\" class=\"headerlink\" title=\"add user:jk with sudo permission\"></a>add user:jk with sudo permission</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser jk</span><br><span class=\"line\">passwd jk</span><br><span class=\"line\">usermod -aG wheel jk</span><br></pre></td></tr></table></figure>\n<h3 id=\"disable-root-login\"><a href=\"#disable-root-login\" class=\"headerlink\" title=\"disable root login\"></a>disable root login</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install vim</span><br><span class=\"line\">sudo vim /etc/ssh/sshd_config</span><br><span class=\"line\"></span><br><span class=\"line\">PermitRootLogin no</span><br><span class=\"line\">PubkeyAuthentication yes</span><br><span class=\"line\"></span><br><span class=\"line\">sudo service sshd restart</span><br></pre></td></tr></table></figure>\n<p>re-login with <code>ssh jk@server_ip_address</code></p>\n<h3 id=\"PubKey-login\"><a href=\"#PubKey-login\" class=\"headerlink\" title=\"PubKey login\"></a>PubKey login</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br><span class=\"line\"><span class=\"built_in\">cd</span></span><br><span class=\"line\">vim .ssh/authorized_keys</span><br><span class=\"line\">chmod 600 .ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<h3 id=\"Install-oh-my-zsh\"><a href=\"#Install-oh-my-zsh\" class=\"headerlink\" title=\"Install oh-my-zsh\"></a>Install oh-my-zsh</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install zsh</span><br><span class=\"line\">sudo yum install git</span><br><span class=\"line\">sh -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Code-Env\"><a href=\"#Code-Env\" class=\"headerlink\" title=\"Code Env\"></a>Code Env</h2><h3 id=\"Python3\"><a href=\"#Python3\" class=\"headerlink\" title=\"Python3\"></a>Python3</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y update</span><br><span class=\"line\">sudo yum -y install yum-utils</span><br><span class=\"line\">sudo yum -y groupinstall development</span><br><span class=\"line\">sudo yum -y install https://centos7.iuscommunity.org/ius-release.rpm</span><br><span class=\"line\">sudo yum -y install python36u</span><br><span class=\"line\">sudo yum -y install python36u-pip</span><br><span class=\"line\">sudo yum -y install python36u-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span></span><br><span class=\"line\">mkdir .pip</span><br><span class=\"line\">vim .pip/pip.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add the following config</span></span><br><span class=\"line\">[global]</span><br><span class=\"line\">index-url = https://mirrors.ustc.edu.cn/pypi/web/simple</span><br><span class=\"line\">format = columns</span><br></pre></td></tr></table></figure>\n<h3 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs\"></a>Nodejs</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span></span><br><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># re-login</span></span><br><span class=\"line\"></span><br><span class=\"line\">nvm install 8.9.3</span><br><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">cnpm install -g pm2</span><br><span class=\"line\">sudo env PATH=<span class=\"variable\">$PATH</span>:/home/jk/.nvm/versions/node/v8.9.3/bin /home/jk/.nvm/versions/node/v8.9.3/lib/node_modules/pm2/bin/pm2 startup systemd -u jk --hp /home/jk</span><br></pre></td></tr></table></figure>\n<h3 id=\"ODBC-Driver\"><a href=\"#ODBC-Driver\" class=\"headerlink\" title=\"ODBC Driver\"></a>ODBC Driver</h3><p><a href=\"https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-SQL-Server-from-RHEL-6-or-Centos-7\" target=\"_blank\" rel=\"noopener\">reference</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo su</span><br><span class=\"line\">curl https://packages.microsoft.com/config/rhel/6/prod.repo &gt; /etc/yum.repos.d/mssql-release.repo</span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">sudo yum remove unixODBC-utf16 unixODBC-utf16-devel</span><br><span class=\"line\">sudo ACCEPT_EULA=Y yum install msodbcsql</span><br><span class=\"line\">sudo yum install unixODBC-devel  <span class=\"comment\"># required by pyodbc</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ZeroMQ\"><a href=\"#ZeroMQ\" class=\"headerlink\" title=\"ZeroMQ\"></a>ZeroMQ</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install zeromq</span><br><span class=\"line\">sudo yum -y install zeromq-devel  <span class=\"comment\"># required by zerorpc</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>This article describes the steps of initiating a CentOS VM normally used with JKOM’s private network.</p>\n<p>Here are the technical requirements:</p>\n<ul>\n<li>create user <code>jk</code> with root privilage</li>\n<li>disable <code>root</code> login from remote</li>\n<li>disable firewall as it’s in local network</li>\n<li>dev-tools such as git</li>\n<li>python 3.6</li>\n<li>node 8.9.3</li>\n</ul>","more":"<h2 id=\"Basics\"><a href=\"#Basics\" class=\"headerlink\" title=\"Basics\"></a>Basics</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@server_ip_address</span><br></pre></td></tr></table></figure>\n<h3 id=\"Fix-locale-warning\"><a href=\"#Fix-locale-warning\" class=\"headerlink\" title=\"Fix locale warning\"></a>Fix locale warning</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/environment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add these lines...</span></span><br><span class=\"line\"></span><br><span class=\"line\">LANG=en_US.utf-8</span><br><span class=\"line\">LC_ALL=en_US.utf-8</span><br></pre></td></tr></table></figure>\n<p>re-login</p>\n<h3 id=\"Package-update\"><a href=\"#Package-update\" class=\"headerlink\" title=\"Package update\"></a>Package update</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br></pre></td></tr></table></figure>\n<h3 id=\"Disable-firewall\"><a href=\"#Disable-firewall\" class=\"headerlink\" title=\"Disable firewall\"></a>Disable firewall</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld.service</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld.service</span><br></pre></td></tr></table></figure>\n<h3 id=\"add-user-jk-with-sudo-permission\"><a href=\"#add-user-jk-with-sudo-permission\" class=\"headerlink\" title=\"add user:jk with sudo permission\"></a>add user:jk with sudo permission</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser jk</span><br><span class=\"line\">passwd jk</span><br><span class=\"line\">usermod -aG wheel jk</span><br></pre></td></tr></table></figure>\n<h3 id=\"disable-root-login\"><a href=\"#disable-root-login\" class=\"headerlink\" title=\"disable root login\"></a>disable root login</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install vim</span><br><span class=\"line\">sudo vim /etc/ssh/sshd_config</span><br><span class=\"line\"></span><br><span class=\"line\">PermitRootLogin no</span><br><span class=\"line\">PubkeyAuthentication yes</span><br><span class=\"line\"></span><br><span class=\"line\">sudo service sshd restart</span><br></pre></td></tr></table></figure>\n<p>re-login with <code>ssh jk@server_ip_address</code></p>\n<h3 id=\"PubKey-login\"><a href=\"#PubKey-login\" class=\"headerlink\" title=\"PubKey login\"></a>PubKey login</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br><span class=\"line\"><span class=\"built_in\">cd</span></span><br><span class=\"line\">vim .ssh/authorized_keys</span><br><span class=\"line\">chmod 600 .ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<h3 id=\"Install-oh-my-zsh\"><a href=\"#Install-oh-my-zsh\" class=\"headerlink\" title=\"Install oh-my-zsh\"></a>Install oh-my-zsh</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install zsh</span><br><span class=\"line\">sudo yum install git</span><br><span class=\"line\">sh -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Code-Env\"><a href=\"#Code-Env\" class=\"headerlink\" title=\"Code Env\"></a>Code Env</h2><h3 id=\"Python3\"><a href=\"#Python3\" class=\"headerlink\" title=\"Python3\"></a>Python3</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y update</span><br><span class=\"line\">sudo yum -y install yum-utils</span><br><span class=\"line\">sudo yum -y groupinstall development</span><br><span class=\"line\">sudo yum -y install https://centos7.iuscommunity.org/ius-release.rpm</span><br><span class=\"line\">sudo yum -y install python36u</span><br><span class=\"line\">sudo yum -y install python36u-pip</span><br><span class=\"line\">sudo yum -y install python36u-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span></span><br><span class=\"line\">mkdir .pip</span><br><span class=\"line\">vim .pip/pip.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add the following config</span></span><br><span class=\"line\">[global]</span><br><span class=\"line\">index-url = https://mirrors.ustc.edu.cn/pypi/web/simple</span><br><span class=\"line\">format = columns</span><br></pre></td></tr></table></figure>\n<h3 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs\"></a>Nodejs</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span></span><br><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># re-login</span></span><br><span class=\"line\"></span><br><span class=\"line\">nvm install 8.9.3</span><br><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">cnpm install -g pm2</span><br><span class=\"line\">sudo env PATH=<span class=\"variable\">$PATH</span>:/home/jk/.nvm/versions/node/v8.9.3/bin /home/jk/.nvm/versions/node/v8.9.3/lib/node_modules/pm2/bin/pm2 startup systemd -u jk --hp /home/jk</span><br></pre></td></tr></table></figure>\n<h3 id=\"ODBC-Driver\"><a href=\"#ODBC-Driver\" class=\"headerlink\" title=\"ODBC Driver\"></a>ODBC Driver</h3><p><a href=\"https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-SQL-Server-from-RHEL-6-or-Centos-7\" target=\"_blank\" rel=\"noopener\">reference</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo su</span><br><span class=\"line\">curl https://packages.microsoft.com/config/rhel/6/prod.repo &gt; /etc/yum.repos.d/mssql-release.repo</span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">sudo yum remove unixODBC-utf16 unixODBC-utf16-devel</span><br><span class=\"line\">sudo ACCEPT_EULA=Y yum install msodbcsql</span><br><span class=\"line\">sudo yum install unixODBC-devel  <span class=\"comment\"># required by pyodbc</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ZeroMQ\"><a href=\"#ZeroMQ\" class=\"headerlink\" title=\"ZeroMQ\"></a>ZeroMQ</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install zeromq</span><br><span class=\"line\">sudo yum -y install zeromq-devel  <span class=\"comment\"># required by zerorpc</span></span><br></pre></td></tr></table></figure>"},{"title":"Running Node.js on Linux with systemd","date":"2018-06-14T05:54:02.000Z","_content":"\n今天在思考如何在Linux服务器上不依赖`PM2`部署直接部署Python Web服务时，碰巧搜到的这片文章。作为一片入门教程，作者给出了非常明确的思路和操作示例，并在字里行间和文末明列出了推荐阅读材料。为推荐给各位阅读，这里我做了全文的复制，[原文链接](https://blog.codeship.com/running-node-js-linux-systemd/)。\n\n感谢作者[Luke Bond](https://blog.codeship.com/author/lukebond/)，有机会我会将全文翻译成中文。\n\n------\n\nThe Node.js community has embraced process monitoring tools such as [PM2](http://pm2.keymetrics.io/), [Nodemon](http://nodemon.io/), and [Forever](https://github.com/foreverjs/forever), which is understandable. For example, in addition to process monitoring, PM2 also boasts features around logging and port-sharing or clustering.\n\nHowever, I’m a firm believer in using the Linux init system for process monitoring. In this blog post, I’ll show you how to recreate process management, logging and clustering functionality using the Linux init system, systemd, and I’ll make the case for this being a superior approach.\n\nPlease note that I’ve no intention of casting aspersions on any of the tools I’ve mentioned. But I think gaining familiarity with Linux is important for Node.js developers; it’s important to use standard tools that are well-proven and widely understood by sysadmins everywhere.\n\n<!-- more -->\n\n## A Note about PM2\n\nI will be making reference to PM2 because it has become ubiquitous in the Node.js community, and therefore it will serve as most people’s frame of reference. PM2 makes it very easy to do:\n\n1. Process management\n2. Log management\n3. Port-sharing magic for Node.js applications\n\nPM2’s ease of use is certainly one of its strongest points; it hides some of the operational realities of running services on Linux from Node.js developers. In this blog post, I’m going to show you how to do each of these three things with systemd.\n\n## An Explanation of Linux Init Systems\n\nAlthough PM2 and similar tools are ubiquitous in the Node.js world, that’s not necessarily the case in other communities. Running your application with the Linux init system will ensure that it’s familiar to any Linux sysadmin. Therefore, knowing more about Linux, the operating system on which the vast majority of Node.js applications run, is very important for Node.js developers.\n\nFirst, let’s run through a brief primer on what Linux init systems are.\n\nEach Linux distribution has a master process running as PID 1 (process ID 1) that is the ancestor of all processes that run on the system. Even if an application spawns a bunch of child processes and orphans them, the init system will still be their ancestor and will clean them up.\n\nThe init system is responsible for starting and stopping services on boot. Typically, sysadmins will write init scripts to start, stop, and restart each service (*e.g.*, databases, web servers). Basically, the Linux init system is the ultimate process monitor.\n\nsystemd is more or less the standard Linux system in the latest release of most Linux distributions, so that’s the one I’m going to cover here. It should be relatively easy to translate these concepts into another init system, such as upstart.\n\n## Creating a Sample Node.js Application\n\nTo aid explanation, I’m going to use a simple, contrived Node.js application that talks to Redis. It has one HTTP endpoint that outputs “Hello, World!” and a counter taken from Redis. It can be found here:\n\nhttps://github.com/lukebond/demo-api-redis\n\nYou will also need:\n\n- A Linux distribution running [systemd](https://en.wikipedia.org/wiki/Systemd#Adoption_and_reception)\n- Node.js installed\n- Redis installed (but not running)\n\nClone the above repository to somewhere in your Linux system and run `npm install`.\n\n## Creating Unit Files\n\nNext we’ll create a *unit file* for our Node.js service. A unit file is what systemd uses to describe a service, its configuration, how to run it, and so on. It’s a text file similar to an INI file.\n\nCreate the following text file and copy it to `/etc/systemd/system/demo-api-redis@.service`:\n\n```ini\n[Unit]\nDescription=HTTP Hello World\nAfter=network.target\n\n[Service]\nUser=luke\nEnvironment=REDIS_HOST=localhost\nWorkingDirectory=/home/luke/Development/demo-api-redis\nExecStart=/usr/bin/node index.js\n\n[Install]\nWantedBy=multi-user.target\n```\n\n> Remember! Modify the path on the `WorkingDirectory=` line to the location where you cloned the git repository.\n\nNow that the unit file is created and is in the correct location on your system, we need to tell systemd to reload its config to pick up the new unit file, then enable and start the service:\n\n```ini\n$ systemctl daemon-reload\n$ systemctl enable demo-api-redis@1\n$ systemctl start demo-api-redis@1\n```\n\n> Learn more about [how to use `systemctl` here](https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units).\n\n*Enabling* a service means that systemd will start that service automatically on boot, but it doesn’t start it now. *Starting* a service is required to start the service now.\n\nCheck the status of the service to see if it worked:\n\n```bash\n$ systemctl status demo-api-redis@1\n● demo-api-redis@1.service - HTTP Hello World\n   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)\n   Active: activating (auto-restart) (Result: exit-code) since Thu 2016-06-30 17:20:09 BST; 62ms ago\n  Process: 29787 ExecStart=/usr/bin/node index.js (code=exited, status=1/FAILURE)\n Main PID: 29787 (code=exited, status=1/FAILURE)\n\nJun 30 17:20:09 luke-arch systemd[1]: demo-api-redis@1.service: Main process exited, code=exited, status=1/FAILURE\nJun 30 17:20:09 luke-arch systemd[1]: demo-api-redis@1.service: Unit entered failed state.\nJun 30 17:20:09 luke-arch systemd[1]: demo-api-redis@1.service: Failed with result 'exit-code'.\n```\n\nThis is failing because Redis isn’t running. Let’s explore dependencies in systemd!\n\n## Exploring systemd Dependencies\n\nWe can add the `Wants=` directive to the `[Unit]` section of a unit file to declare dependencies between services. There are other directives with different semantics (*e.g.*, `Requires=`) but `Wants=` will cause the depended-upon service (in this case, Redis) to be started when our Node.js service is started.\n\nYour unit file should now look like this:\n\n```ini\n[Unit]\nDescription=HTTP Hello World\nAfter=network.target\nWants=redis.service\n\n[Service]\nUser=luke\nEnvironment=REDIS_HOST=localhost\nWorkingDirectory=/home/luke/Development/demo-api-redis\nExecStart=/usr/bin/node index.js\n\n[Install]\nWantedBy=multi-user.target\n```\n\nSignal systemd to reload its config:\n\n```ini\n$ systemctl daemon-reload\n```\n\nAsk systemd to `cat` the unit file just to ensure it has picked up our changes:\n\n```bash\n$ systemctl cat demo-api-redis@1\n# /etc/systemd/system/demo-api-redis@.service\n[Unit]\nDescription=HTTP Hello World\nAfter=network.target\nWants=redis.service\n\n[Service]\nEnvironment=REDIS_HOST=localhost\nUser=luke\nWorkingDirectory=/home/luke/Development/demo-api-redis\nExecStart=/usr/bin/node index.js\n\n[Install]\nWantedBy=multi-user.target\n```\n\nAnd now restart the service. We can see that the service now works:\n\n```bash\n$ systemctl restart demo-api-redis@1\n$ systemctl status demo-api-redis@1\n● demo-api-redis@1.service - HTTP Hello World\n   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)\n   Active: active (running) since Thu 2016-06-30 17:17:19 BST; 187ms ago\n Main PID: 27050 (node)\n    Tasks: 10 (limit: 512)\n   CGroup: /system.slice/system-demo\\x2dapi\\x2dredis.slice/demo-api-redis@1.service\n           └─27050 /usr/bin/node index.js\n\nJun 30 17:17:19 luke-arch systemd[1]: Started HTTP Hello World.\n$ curl localhost:9000\n\"Hello, world 192.168.1.39! 1 hits.\"\n```\n\nIt works because it has triggered Redis to run:\n\n```bash\n$ systemctl status redis\n● redis.service - Advanced key-value store\n   Loaded: loaded (/usr/lib/systemd/system/redis.service; disabled; vendor preset: disabled)\n   Active: active (running) since Fri 2016-07-01 10:31:54 BST; 3s ago\n Main PID: 28643 (redis-server)\n    Tasks: 3 (limit: 512)\n   Memory: 6.3M\n      CPU: 10ms\n   CGroup: /system.slice/redis.service\n           └─28643 /usr/bin/redis-server 127.0.0.1:6379 \n\nJul 01 10:31:54 luke-arch redis-server[28643]:   `-._    `-._`-.__.-'_.-'    _.-'\nJul 01 10:31:54 luke-arch redis-server[28643]:       `-._    `-.__.-'    _.-'\nJul 01 10:31:54 luke-arch redis-server[28643]:           `-._        _.-'\nJul 01 10:31:54 luke-arch redis-server[28643]:               `-.__.-'\nJul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.\nJul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 # Server started, Redis version 3.2.1\nJul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory\nJul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Red\nJul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 * DB loaded from disk: 0.000 seconds\nJul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 * The server is now ready to accept connections on port 6379\n```\n\n## Process Management\n\nThe first item of PM2 functionality we’re working toward is process management. This means restarting services when they crash and when the machine reboots. Do we have this functionality yet? Let’s find out.\n\n```bash\n$ systemctl status demo-api-redis@1 | grep \"PID\"\n Main PID: 28649 (node)\n$ sudo kill -9 28649\n$ systemctl status demo-api-redis@1\n● demo-api-redis@1.service - HTTP Hello World\n   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)\n   Active: failed (Result: signal) since Fri 2016-07-01 10:55:49 BST; 2s ago\n  Process: 29145 ExecStart=/usr/bin/node index.js (code=killed, signal=KILL)\n Main PID: 29145 (code=killed, signal=KILL)\n\nJul 01 10:55:39 luke-arch systemd[1]: Started HTTP Hello World.\nJul 01 10:55:40 luke-arch node[29145]: (node:29145) DeprecationWarning: process.EventEmitter is deprecated. Use require('events') instead.\nJul 01 10:55:40 luke-arch node[29145]: Listening on port 9000\nJul 01 10:55:49 luke-arch systemd[1]: demo-api-redis@1.service: Main process exited, code=killed, status=9/KILL\nJul 01 10:55:49 luke-arch systemd[1]: demo-api-redis@1.service: Unit entered failed state.\nJul 01 10:55:49 luke-arch systemd[1]: demo-api-redis@1.service: Failed with result 'signal'.\n```\n\nSo systemd is not restarting our service when it crashes, but never fear — systemd has a range of options for configuring this behavior. Adding the following to the `[Service]` section of our unit file will be fine for our purposes:\n\n```ini\nRestart=always\nRestartSec=500ms\nStartLimitInterval=0\n```\n\nThis tells systemd to always restart the service after a 500ms delay. You can configure it to give up eventually, but this should be fine for our purposes. Now reload systemd’s config and restart the service and try killing the process:\n\n```bash\n$ systemctl daemon-reload\n$ systemctl cat demo-api-redis@1\n# /etc/systemd/system/demo-api-redis@.service\n[Unit]\nDescription=HTTP Hello World\nAfter=network.target\nWants=redis.service\n\n[Service]\nEnvironment=REDIS_HOST=localhost\nUser=luke\nWorkingDirectory=/home/luke/Development/demo-api-redis\nExecStart=/usr/bin/node index.js\n\n[Install]\nWantedBy=multi-user.target\n$ systemctl restart demo-api-redis@1\n$ systemctl status demo-api-redis@1.service | grep PID\n Main PID: 29145 (code=killed, signal=KILL)\n$ sudo kill -9 29145\n$ systemctl status demo-api-redis@1\n● demo-api-redis@1.service - HTTP Hello World\n   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; disabled; vendor preset: disabled)\n   Active: active (running) since Fri 2016-07-01 11:08:41 BST; 2s ago\n Main PID: 29884 (node)\n    Tasks: 10 (limit: 512)\n   CGroup: /system.slice/system-demo\\x2dapi\\x2dredis.slice/demo-api-redis@1.service\n           └─29884 /usr/bin/node index.js\n\nJul 01 11:08:41 luke-arch systemd[1]: Stopped HTTP Hello World.\nJul 01 11:08:41 luke-arch systemd[1]: Started HTTP Hello World.\nJul 01 11:08:41 luke-arch node[29884]: (node:29884) DeprecationWarning: process.EventEmitter is deprecated. Use require('events') instead.\nJul 01 11:08:41 luke-arch node[29884]: Listening on port 9000\n```\n\nIt works! systemd is now restarting our service when it goes down. It will also start it up automatically if the machine reboots (that’s what it means to `enable` a service). Go ahead and reboot to prove it.\n\nWe’ve now recreated one of our three PM2 features: process management. Let’s move on to the next one.\n\n## Logging\n\nThis is the easiest of our three target features. systemd has a very powerful logging tool called `journalctl`. It’s a sysadmin’s Swiss Army knife of logging, and it can do anything you’ll ever need from a logging tool. No Node.js userland tool comes close.\n\nTo scroll through logs for a unit or service:\n\n```bash\n$ journalctl -u demo-api-redis@1\n```\n\nTo follow the same:\n\n```bash\n$ journalctl -u demo-api-redis@1 -f\n```\n\nYou can ask for logs since the last boot:\n\n```bash\n$ journalctl -u demo-api-redis@1 --boot\n```\n\nOr since a specific time, in various ways:\n\n```bash\n$ journalctl -u demo-api-redis@1 --since 08:00\n$ journalctl -u demo-api-redis@1 --since today\n$ journalctl -u demo-api-redis@1 --since yesterday\n$ journalctl -u demo-api-redis@1 --since 2016-06-02 15:36:00\n```\n\nYou can filter by log level (console.log, console.error, etc.):\n\n```bash\n$ journalctl -u demo-api-redis@1 -p err\n```\n\nThere is so much more you can do; it’s super powerful. [This article is a great place to start to learn all about `journalctl`.](https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs)\n\n## Multiple Instances\n\nWe’ve covered two of our three features now. The last one is port sharing, or clustering as it is often called in the Node.js world. But before we can address that, we need to be able to run multiple instances of our service.\n\nYou may have noticed that our unit file has an `@` symbol in the filename, and that we’ve been referring to our service as `demo-api-redis@1`. The `1` after the `@` symbol is the instance name (it doesn’t have to be a number). We could run two more instances of our service using something like `systemctl start demo-api-redis@{2,3}`, but first we need them to bind to different ports or they’ll clash.\n\nOur sample app takes an environment variable to set the port, so we can use the instance name to give each service a unique port. Add the following additional `Environment=` line to the `[Service]` section of the unit file:\n\n```ini\nEnvironment=LISTEN_PORT=900%i\n```\n\nThis will mean that `demo-api-redis@1` will get port `9001`, `demo-api-redis@2` will get port `9002`, and `demo-api-redis@3` will get port `9003`, leaving `9000` for our load balancer.\n\nOnce you’ve edited the unit file, you need to reload the config, check that it’s correct, start two new instances, and restart the existing one:\n\n```bash\n$ systemctl daemon-reload\n$ systemctl cat demo-api-redis@1\n# /etc/systemd/system/demo-api-redis@.service\n[Unit]\nDescription=HTTP Hello World\nAfter=network.target\nWants=redis.service\n\n[Service]\nEnvironment=REDIS_HOST=localhost\nEnvironment=LISTEN_PORT=900%i\nUser=luke\nWorkingDirectory=/home/luke/Development/demo-api-redis\nExecStart=/usr/bin/node index.js\nRestart=always\nRestartSec=500ms\nStartLimitInterval=0\n\n[Install]\nWantedBy=multi-user.target\n$ systemctl enable demo-api-redis@{2,3}\n$ systemctl start demo-api-redis@{2,3}\n$ systemctl restart demo-api-redis@1\n$ systemctl status demo-api-redis@{1,2,3}\n● demo-api-redis@1.service - HTTP Hello World\n   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)\n   Active: active (running) since Fri 2016-07-01 11:08:41 BST; 56min ago\n Main PID: 29884 (node)\n   CGroup: /system.slice/system-demo\\x2dapi\\x2dredis.slice/demo-api-redis@1.service\n           └─29884 /usr/bin/node index.js\n\nJul 01 11:08:41 luke-arch systemd[1]: Stopped HTTP Hello World.\nJul 01 11:08:41 luke-arch systemd[1]: Started HTTP Hello World.\nJul 01 11:08:41 luke-arch node[29884]: (node:29884) DeprecationWarning: process.EventEmitter is deprecated. Use require('events') instead.\nJul 01 11:08:41 luke-arch node[29884]: Listening on port 9001\n\n● demo-api-redis@2.service - HTTP Hello World\n   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)\n   Active: active (running) since Fri 2016-07-01 12:04:34 BST; 18s ago\n Main PID: 30747 (node)\n   CGroup: /system.slice/system-demo\\x2dapi\\x2dredis.slice/demo-api-redis@2.service\n           └─30747 /usr/bin/node index.js\n\nJul 01 12:04:34 luke-arch systemd[1]: Started HTTP Hello World.\nJul 01 12:04:34 luke-arch node[30747]: (node:30747) DeprecationWarning: process.EventEmitter is deprecated. Use require('events') instead.\nJul 01 12:04:34 luke-arch node[30747]: Listening on port 9002\n\n● demo-api-redis@3.service - HTTP Hello World\n   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)\n   Active: active (running) since Fri 2016-07-01 12:04:34 BST; 18s ago\n Main PID: 30753 (node)\n   CGroup: /system.slice/system-demo\\x2dapi\\x2dredis.slice/demo-api-redis@3.service\n           └─30753 /usr/bin/node index.js\n\nJul 01 12:04:34 luke-arch systemd[1]: Started HTTP Hello World.\nJul 01 12:04:34 luke-arch node[30753]: (node:30753) DeprecationWarning: process.EventEmitter is deprecated. Use require('events') instead.\nJul 01 12:04:34 luke-arch node[30753]: Listening on port 9003\n```\n\nWe should now be able to curl each of these:\n\n```bash\n$ curl localhost:900{1,2,3}\n\"Hello, world 192.168.1.39! 52 hits.\"\"Hello, world 192.168.1.39! 53 hits.\"\"Hello, world 192.168.1.39! 54 hits.\"\n```\n\nI’m assuming a 4-core machine, so I’m running three instances, leaving one core for Redis (which is probably not necessary). Adjust this accordingly for your environment and application.\n\nNow, on to the final part: load balancing.\n\n## Load Balancing\n\nOne could use NGINX or HAProxy to balance the traffic across the instances of our service. However, since I’m claiming that it’s super simple to replace PM2 functionality, I wanted to go with something lighter.\n\n[Balance](https://www.inlab.de/balance.html) is a tiny (few-hundred lines of C) TCP load balancer that’s fast and simple to use. For example:\n\n```bash\n$ balance -f 9000 127.0.0.1:900{1,2,3} &\n$ curl localhost:9000\n\"Hello, world 192.168.1.39! 20 hits.\"\n```\n\nThe above one-liner launches balance, listening on port `9000` and balancing across ports `9001-9003`. But we don’t want to run it in the foreground like this. Let’s write a unit file:\n\n```bash\n$ cat /etc/systemd/system/balance.service\n[Unit]\nDescription=Balance - Simple TCP Load Balancer\nAfter=syslog.target network.target nss-lookup.target\n\n[Service]\nExecStart=/usr/bin/balance -f 9000 127.0.0.1:9001 127.0.0.1:9002 127.0.0.1:9003\n\n[Install]\nWantedBy=multi-user.target\n$ systemctl daemon-reload\n$ systemctl enable balance\n$ systemctl start balance\n$ systemctl status balance\n● balance.service - Balance - Simple TCP Load Balancer\n   Loaded: loaded (/etc/systemd/system/balance.service; enabled; vendor preset: disabled)\n   Active: active (running) since Fri 2016-07-01 13:56:46 BST; 3s ago\n Main PID: 32674 (balance)\n    Tasks: 1 (limit: 512)\n   Memory: 316.0K\n      CPU: 10ms\n   CGroup: /system.slice/balance.service\n           └─32674 /usr/bin/balance -f 9000 127.0.0.1:9001 127.0.0.1:9002 127.0.0.1:9003\n\nJul 01 13:56:46 luke-arch systemd[1]: Started Balance - Simple TCP Load Balancer.\n$ curl localhost:9000\n\"Hello, world 192.168.1.39! 21 hits.\"\n```\n\n## Conclusion\n\nWe’ve successfully recreated the three main features of PM2 using basic Linux tools, in fact, mostly just systemd. But this is only a very basic implementation. There are a number of details I’ve overlooked for the sake of simplicity:\n\n- SSL termination.\n- Ports `9001-9003` are currently bound to the public IP, not the private (this is just laziness in my Node.js sample app).\n- The balance unit file has hardcoded ports 9001-9003; it should be relatively easy to dynamically configure balance and send it a signal to reload config.\n- I’d normally use containers so that the dependencies (*e.g.*, Node.js version) is bundled inside the container and doesn’t need to be installed on the host.\n\nLinux init systems such as systemd are the ultimate process monitor, and systemd in particular is so much more than that. It can do all that PM2 and similar tools can do, and then some. The tooling is far superior, it’s more mature, and it has a much larger userbase of seasoned sysadmins.\n\nLearning to use systemd for running your Node.js applications (or any other applications for that matter) is much easier than you might think. Once you’ve spent a little time learning these concepts, I think you’ll agree that Linux is the best tool for the job. After all, you’ll need to configure the Linux init systemd to start PM2 on boot and restart it if it crashes. If you need the Linux init system to start your process monitor, why not just use it to run all your services?\n\n## Further Reading\n\n- [systemd distros](https://en.wikipedia.org/wiki/Systemd#Adoption_and_reception)\n- [Good article on using systemctl](https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units)\n- [Good article on using journalctl](https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs)\n- [The creator of systemd talking about security features](https://www.youtube.com/watch?v=hiW8eIdcRgo&list=PLlh6TqkU8kg_3FpXLlHMnoVqKZysIzXlK&index=6)\n- [Videos from systemd conf 2015](https://www.youtube.com/channel/UCvq_RgZp3kljp9X8Io9Z1DA)\n- [systemd man pages – unit](https://www.freedesktop.org/software/systemd/man/systemd.unit.html)\n- [systemd man pages – service](https://www.freedesktop.org/software/systemd/man/systemd.service.html)\n","source":"_posts/Running-Node-js-on-Linux-with-systemd.md","raw":"---\ntitle: Running Node.js on Linux with systemd\ndate: 2018-06-14 13:54:02\ntags:\n  - deployment\n  - sysadmin\n  - nodejs\n---\n\n今天在思考如何在Linux服务器上不依赖`PM2`部署直接部署Python Web服务时，碰巧搜到的这片文章。作为一片入门教程，作者给出了非常明确的思路和操作示例，并在字里行间和文末明列出了推荐阅读材料。为推荐给各位阅读，这里我做了全文的复制，[原文链接](https://blog.codeship.com/running-node-js-linux-systemd/)。\n\n感谢作者[Luke Bond](https://blog.codeship.com/author/lukebond/)，有机会我会将全文翻译成中文。\n\n------\n\nThe Node.js community has embraced process monitoring tools such as [PM2](http://pm2.keymetrics.io/), [Nodemon](http://nodemon.io/), and [Forever](https://github.com/foreverjs/forever), which is understandable. For example, in addition to process monitoring, PM2 also boasts features around logging and port-sharing or clustering.\n\nHowever, I’m a firm believer in using the Linux init system for process monitoring. In this blog post, I’ll show you how to recreate process management, logging and clustering functionality using the Linux init system, systemd, and I’ll make the case for this being a superior approach.\n\nPlease note that I’ve no intention of casting aspersions on any of the tools I’ve mentioned. But I think gaining familiarity with Linux is important for Node.js developers; it’s important to use standard tools that are well-proven and widely understood by sysadmins everywhere.\n\n<!-- more -->\n\n## A Note about PM2\n\nI will be making reference to PM2 because it has become ubiquitous in the Node.js community, and therefore it will serve as most people’s frame of reference. PM2 makes it very easy to do:\n\n1. Process management\n2. Log management\n3. Port-sharing magic for Node.js applications\n\nPM2’s ease of use is certainly one of its strongest points; it hides some of the operational realities of running services on Linux from Node.js developers. In this blog post, I’m going to show you how to do each of these three things with systemd.\n\n## An Explanation of Linux Init Systems\n\nAlthough PM2 and similar tools are ubiquitous in the Node.js world, that’s not necessarily the case in other communities. Running your application with the Linux init system will ensure that it’s familiar to any Linux sysadmin. Therefore, knowing more about Linux, the operating system on which the vast majority of Node.js applications run, is very important for Node.js developers.\n\nFirst, let’s run through a brief primer on what Linux init systems are.\n\nEach Linux distribution has a master process running as PID 1 (process ID 1) that is the ancestor of all processes that run on the system. Even if an application spawns a bunch of child processes and orphans them, the init system will still be their ancestor and will clean them up.\n\nThe init system is responsible for starting and stopping services on boot. Typically, sysadmins will write init scripts to start, stop, and restart each service (*e.g.*, databases, web servers). Basically, the Linux init system is the ultimate process monitor.\n\nsystemd is more or less the standard Linux system in the latest release of most Linux distributions, so that’s the one I’m going to cover here. It should be relatively easy to translate these concepts into another init system, such as upstart.\n\n## Creating a Sample Node.js Application\n\nTo aid explanation, I’m going to use a simple, contrived Node.js application that talks to Redis. It has one HTTP endpoint that outputs “Hello, World!” and a counter taken from Redis. It can be found here:\n\nhttps://github.com/lukebond/demo-api-redis\n\nYou will also need:\n\n- A Linux distribution running [systemd](https://en.wikipedia.org/wiki/Systemd#Adoption_and_reception)\n- Node.js installed\n- Redis installed (but not running)\n\nClone the above repository to somewhere in your Linux system and run `npm install`.\n\n## Creating Unit Files\n\nNext we’ll create a *unit file* for our Node.js service. A unit file is what systemd uses to describe a service, its configuration, how to run it, and so on. It’s a text file similar to an INI file.\n\nCreate the following text file and copy it to `/etc/systemd/system/demo-api-redis@.service`:\n\n```ini\n[Unit]\nDescription=HTTP Hello World\nAfter=network.target\n\n[Service]\nUser=luke\nEnvironment=REDIS_HOST=localhost\nWorkingDirectory=/home/luke/Development/demo-api-redis\nExecStart=/usr/bin/node index.js\n\n[Install]\nWantedBy=multi-user.target\n```\n\n> Remember! Modify the path on the `WorkingDirectory=` line to the location where you cloned the git repository.\n\nNow that the unit file is created and is in the correct location on your system, we need to tell systemd to reload its config to pick up the new unit file, then enable and start the service:\n\n```ini\n$ systemctl daemon-reload\n$ systemctl enable demo-api-redis@1\n$ systemctl start demo-api-redis@1\n```\n\n> Learn more about [how to use `systemctl` here](https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units).\n\n*Enabling* a service means that systemd will start that service automatically on boot, but it doesn’t start it now. *Starting* a service is required to start the service now.\n\nCheck the status of the service to see if it worked:\n\n```bash\n$ systemctl status demo-api-redis@1\n● demo-api-redis@1.service - HTTP Hello World\n   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)\n   Active: activating (auto-restart) (Result: exit-code) since Thu 2016-06-30 17:20:09 BST; 62ms ago\n  Process: 29787 ExecStart=/usr/bin/node index.js (code=exited, status=1/FAILURE)\n Main PID: 29787 (code=exited, status=1/FAILURE)\n\nJun 30 17:20:09 luke-arch systemd[1]: demo-api-redis@1.service: Main process exited, code=exited, status=1/FAILURE\nJun 30 17:20:09 luke-arch systemd[1]: demo-api-redis@1.service: Unit entered failed state.\nJun 30 17:20:09 luke-arch systemd[1]: demo-api-redis@1.service: Failed with result 'exit-code'.\n```\n\nThis is failing because Redis isn’t running. Let’s explore dependencies in systemd!\n\n## Exploring systemd Dependencies\n\nWe can add the `Wants=` directive to the `[Unit]` section of a unit file to declare dependencies between services. There are other directives with different semantics (*e.g.*, `Requires=`) but `Wants=` will cause the depended-upon service (in this case, Redis) to be started when our Node.js service is started.\n\nYour unit file should now look like this:\n\n```ini\n[Unit]\nDescription=HTTP Hello World\nAfter=network.target\nWants=redis.service\n\n[Service]\nUser=luke\nEnvironment=REDIS_HOST=localhost\nWorkingDirectory=/home/luke/Development/demo-api-redis\nExecStart=/usr/bin/node index.js\n\n[Install]\nWantedBy=multi-user.target\n```\n\nSignal systemd to reload its config:\n\n```ini\n$ systemctl daemon-reload\n```\n\nAsk systemd to `cat` the unit file just to ensure it has picked up our changes:\n\n```bash\n$ systemctl cat demo-api-redis@1\n# /etc/systemd/system/demo-api-redis@.service\n[Unit]\nDescription=HTTP Hello World\nAfter=network.target\nWants=redis.service\n\n[Service]\nEnvironment=REDIS_HOST=localhost\nUser=luke\nWorkingDirectory=/home/luke/Development/demo-api-redis\nExecStart=/usr/bin/node index.js\n\n[Install]\nWantedBy=multi-user.target\n```\n\nAnd now restart the service. We can see that the service now works:\n\n```bash\n$ systemctl restart demo-api-redis@1\n$ systemctl status demo-api-redis@1\n● demo-api-redis@1.service - HTTP Hello World\n   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)\n   Active: active (running) since Thu 2016-06-30 17:17:19 BST; 187ms ago\n Main PID: 27050 (node)\n    Tasks: 10 (limit: 512)\n   CGroup: /system.slice/system-demo\\x2dapi\\x2dredis.slice/demo-api-redis@1.service\n           └─27050 /usr/bin/node index.js\n\nJun 30 17:17:19 luke-arch systemd[1]: Started HTTP Hello World.\n$ curl localhost:9000\n\"Hello, world 192.168.1.39! 1 hits.\"\n```\n\nIt works because it has triggered Redis to run:\n\n```bash\n$ systemctl status redis\n● redis.service - Advanced key-value store\n   Loaded: loaded (/usr/lib/systemd/system/redis.service; disabled; vendor preset: disabled)\n   Active: active (running) since Fri 2016-07-01 10:31:54 BST; 3s ago\n Main PID: 28643 (redis-server)\n    Tasks: 3 (limit: 512)\n   Memory: 6.3M\n      CPU: 10ms\n   CGroup: /system.slice/redis.service\n           └─28643 /usr/bin/redis-server 127.0.0.1:6379 \n\nJul 01 10:31:54 luke-arch redis-server[28643]:   `-._    `-._`-.__.-'_.-'    _.-'\nJul 01 10:31:54 luke-arch redis-server[28643]:       `-._    `-.__.-'    _.-'\nJul 01 10:31:54 luke-arch redis-server[28643]:           `-._        _.-'\nJul 01 10:31:54 luke-arch redis-server[28643]:               `-.__.-'\nJul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.\nJul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 # Server started, Redis version 3.2.1\nJul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory\nJul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Red\nJul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 * DB loaded from disk: 0.000 seconds\nJul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 * The server is now ready to accept connections on port 6379\n```\n\n## Process Management\n\nThe first item of PM2 functionality we’re working toward is process management. This means restarting services when they crash and when the machine reboots. Do we have this functionality yet? Let’s find out.\n\n```bash\n$ systemctl status demo-api-redis@1 | grep \"PID\"\n Main PID: 28649 (node)\n$ sudo kill -9 28649\n$ systemctl status demo-api-redis@1\n● demo-api-redis@1.service - HTTP Hello World\n   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)\n   Active: failed (Result: signal) since Fri 2016-07-01 10:55:49 BST; 2s ago\n  Process: 29145 ExecStart=/usr/bin/node index.js (code=killed, signal=KILL)\n Main PID: 29145 (code=killed, signal=KILL)\n\nJul 01 10:55:39 luke-arch systemd[1]: Started HTTP Hello World.\nJul 01 10:55:40 luke-arch node[29145]: (node:29145) DeprecationWarning: process.EventEmitter is deprecated. Use require('events') instead.\nJul 01 10:55:40 luke-arch node[29145]: Listening on port 9000\nJul 01 10:55:49 luke-arch systemd[1]: demo-api-redis@1.service: Main process exited, code=killed, status=9/KILL\nJul 01 10:55:49 luke-arch systemd[1]: demo-api-redis@1.service: Unit entered failed state.\nJul 01 10:55:49 luke-arch systemd[1]: demo-api-redis@1.service: Failed with result 'signal'.\n```\n\nSo systemd is not restarting our service when it crashes, but never fear — systemd has a range of options for configuring this behavior. Adding the following to the `[Service]` section of our unit file will be fine for our purposes:\n\n```ini\nRestart=always\nRestartSec=500ms\nStartLimitInterval=0\n```\n\nThis tells systemd to always restart the service after a 500ms delay. You can configure it to give up eventually, but this should be fine for our purposes. Now reload systemd’s config and restart the service and try killing the process:\n\n```bash\n$ systemctl daemon-reload\n$ systemctl cat demo-api-redis@1\n# /etc/systemd/system/demo-api-redis@.service\n[Unit]\nDescription=HTTP Hello World\nAfter=network.target\nWants=redis.service\n\n[Service]\nEnvironment=REDIS_HOST=localhost\nUser=luke\nWorkingDirectory=/home/luke/Development/demo-api-redis\nExecStart=/usr/bin/node index.js\n\n[Install]\nWantedBy=multi-user.target\n$ systemctl restart demo-api-redis@1\n$ systemctl status demo-api-redis@1.service | grep PID\n Main PID: 29145 (code=killed, signal=KILL)\n$ sudo kill -9 29145\n$ systemctl status demo-api-redis@1\n● demo-api-redis@1.service - HTTP Hello World\n   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; disabled; vendor preset: disabled)\n   Active: active (running) since Fri 2016-07-01 11:08:41 BST; 2s ago\n Main PID: 29884 (node)\n    Tasks: 10 (limit: 512)\n   CGroup: /system.slice/system-demo\\x2dapi\\x2dredis.slice/demo-api-redis@1.service\n           └─29884 /usr/bin/node index.js\n\nJul 01 11:08:41 luke-arch systemd[1]: Stopped HTTP Hello World.\nJul 01 11:08:41 luke-arch systemd[1]: Started HTTP Hello World.\nJul 01 11:08:41 luke-arch node[29884]: (node:29884) DeprecationWarning: process.EventEmitter is deprecated. Use require('events') instead.\nJul 01 11:08:41 luke-arch node[29884]: Listening on port 9000\n```\n\nIt works! systemd is now restarting our service when it goes down. It will also start it up automatically if the machine reboots (that’s what it means to `enable` a service). Go ahead and reboot to prove it.\n\nWe’ve now recreated one of our three PM2 features: process management. Let’s move on to the next one.\n\n## Logging\n\nThis is the easiest of our three target features. systemd has a very powerful logging tool called `journalctl`. It’s a sysadmin’s Swiss Army knife of logging, and it can do anything you’ll ever need from a logging tool. No Node.js userland tool comes close.\n\nTo scroll through logs for a unit or service:\n\n```bash\n$ journalctl -u demo-api-redis@1\n```\n\nTo follow the same:\n\n```bash\n$ journalctl -u demo-api-redis@1 -f\n```\n\nYou can ask for logs since the last boot:\n\n```bash\n$ journalctl -u demo-api-redis@1 --boot\n```\n\nOr since a specific time, in various ways:\n\n```bash\n$ journalctl -u demo-api-redis@1 --since 08:00\n$ journalctl -u demo-api-redis@1 --since today\n$ journalctl -u demo-api-redis@1 --since yesterday\n$ journalctl -u demo-api-redis@1 --since 2016-06-02 15:36:00\n```\n\nYou can filter by log level (console.log, console.error, etc.):\n\n```bash\n$ journalctl -u demo-api-redis@1 -p err\n```\n\nThere is so much more you can do; it’s super powerful. [This article is a great place to start to learn all about `journalctl`.](https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs)\n\n## Multiple Instances\n\nWe’ve covered two of our three features now. The last one is port sharing, or clustering as it is often called in the Node.js world. But before we can address that, we need to be able to run multiple instances of our service.\n\nYou may have noticed that our unit file has an `@` symbol in the filename, and that we’ve been referring to our service as `demo-api-redis@1`. The `1` after the `@` symbol is the instance name (it doesn’t have to be a number). We could run two more instances of our service using something like `systemctl start demo-api-redis@{2,3}`, but first we need them to bind to different ports or they’ll clash.\n\nOur sample app takes an environment variable to set the port, so we can use the instance name to give each service a unique port. Add the following additional `Environment=` line to the `[Service]` section of the unit file:\n\n```ini\nEnvironment=LISTEN_PORT=900%i\n```\n\nThis will mean that `demo-api-redis@1` will get port `9001`, `demo-api-redis@2` will get port `9002`, and `demo-api-redis@3` will get port `9003`, leaving `9000` for our load balancer.\n\nOnce you’ve edited the unit file, you need to reload the config, check that it’s correct, start two new instances, and restart the existing one:\n\n```bash\n$ systemctl daemon-reload\n$ systemctl cat demo-api-redis@1\n# /etc/systemd/system/demo-api-redis@.service\n[Unit]\nDescription=HTTP Hello World\nAfter=network.target\nWants=redis.service\n\n[Service]\nEnvironment=REDIS_HOST=localhost\nEnvironment=LISTEN_PORT=900%i\nUser=luke\nWorkingDirectory=/home/luke/Development/demo-api-redis\nExecStart=/usr/bin/node index.js\nRestart=always\nRestartSec=500ms\nStartLimitInterval=0\n\n[Install]\nWantedBy=multi-user.target\n$ systemctl enable demo-api-redis@{2,3}\n$ systemctl start demo-api-redis@{2,3}\n$ systemctl restart demo-api-redis@1\n$ systemctl status demo-api-redis@{1,2,3}\n● demo-api-redis@1.service - HTTP Hello World\n   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)\n   Active: active (running) since Fri 2016-07-01 11:08:41 BST; 56min ago\n Main PID: 29884 (node)\n   CGroup: /system.slice/system-demo\\x2dapi\\x2dredis.slice/demo-api-redis@1.service\n           └─29884 /usr/bin/node index.js\n\nJul 01 11:08:41 luke-arch systemd[1]: Stopped HTTP Hello World.\nJul 01 11:08:41 luke-arch systemd[1]: Started HTTP Hello World.\nJul 01 11:08:41 luke-arch node[29884]: (node:29884) DeprecationWarning: process.EventEmitter is deprecated. Use require('events') instead.\nJul 01 11:08:41 luke-arch node[29884]: Listening on port 9001\n\n● demo-api-redis@2.service - HTTP Hello World\n   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)\n   Active: active (running) since Fri 2016-07-01 12:04:34 BST; 18s ago\n Main PID: 30747 (node)\n   CGroup: /system.slice/system-demo\\x2dapi\\x2dredis.slice/demo-api-redis@2.service\n           └─30747 /usr/bin/node index.js\n\nJul 01 12:04:34 luke-arch systemd[1]: Started HTTP Hello World.\nJul 01 12:04:34 luke-arch node[30747]: (node:30747) DeprecationWarning: process.EventEmitter is deprecated. Use require('events') instead.\nJul 01 12:04:34 luke-arch node[30747]: Listening on port 9002\n\n● demo-api-redis@3.service - HTTP Hello World\n   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)\n   Active: active (running) since Fri 2016-07-01 12:04:34 BST; 18s ago\n Main PID: 30753 (node)\n   CGroup: /system.slice/system-demo\\x2dapi\\x2dredis.slice/demo-api-redis@3.service\n           └─30753 /usr/bin/node index.js\n\nJul 01 12:04:34 luke-arch systemd[1]: Started HTTP Hello World.\nJul 01 12:04:34 luke-arch node[30753]: (node:30753) DeprecationWarning: process.EventEmitter is deprecated. Use require('events') instead.\nJul 01 12:04:34 luke-arch node[30753]: Listening on port 9003\n```\n\nWe should now be able to curl each of these:\n\n```bash\n$ curl localhost:900{1,2,3}\n\"Hello, world 192.168.1.39! 52 hits.\"\"Hello, world 192.168.1.39! 53 hits.\"\"Hello, world 192.168.1.39! 54 hits.\"\n```\n\nI’m assuming a 4-core machine, so I’m running three instances, leaving one core for Redis (which is probably not necessary). Adjust this accordingly for your environment and application.\n\nNow, on to the final part: load balancing.\n\n## Load Balancing\n\nOne could use NGINX or HAProxy to balance the traffic across the instances of our service. However, since I’m claiming that it’s super simple to replace PM2 functionality, I wanted to go with something lighter.\n\n[Balance](https://www.inlab.de/balance.html) is a tiny (few-hundred lines of C) TCP load balancer that’s fast and simple to use. For example:\n\n```bash\n$ balance -f 9000 127.0.0.1:900{1,2,3} &\n$ curl localhost:9000\n\"Hello, world 192.168.1.39! 20 hits.\"\n```\n\nThe above one-liner launches balance, listening on port `9000` and balancing across ports `9001-9003`. But we don’t want to run it in the foreground like this. Let’s write a unit file:\n\n```bash\n$ cat /etc/systemd/system/balance.service\n[Unit]\nDescription=Balance - Simple TCP Load Balancer\nAfter=syslog.target network.target nss-lookup.target\n\n[Service]\nExecStart=/usr/bin/balance -f 9000 127.0.0.1:9001 127.0.0.1:9002 127.0.0.1:9003\n\n[Install]\nWantedBy=multi-user.target\n$ systemctl daemon-reload\n$ systemctl enable balance\n$ systemctl start balance\n$ systemctl status balance\n● balance.service - Balance - Simple TCP Load Balancer\n   Loaded: loaded (/etc/systemd/system/balance.service; enabled; vendor preset: disabled)\n   Active: active (running) since Fri 2016-07-01 13:56:46 BST; 3s ago\n Main PID: 32674 (balance)\n    Tasks: 1 (limit: 512)\n   Memory: 316.0K\n      CPU: 10ms\n   CGroup: /system.slice/balance.service\n           └─32674 /usr/bin/balance -f 9000 127.0.0.1:9001 127.0.0.1:9002 127.0.0.1:9003\n\nJul 01 13:56:46 luke-arch systemd[1]: Started Balance - Simple TCP Load Balancer.\n$ curl localhost:9000\n\"Hello, world 192.168.1.39! 21 hits.\"\n```\n\n## Conclusion\n\nWe’ve successfully recreated the three main features of PM2 using basic Linux tools, in fact, mostly just systemd. But this is only a very basic implementation. There are a number of details I’ve overlooked for the sake of simplicity:\n\n- SSL termination.\n- Ports `9001-9003` are currently bound to the public IP, not the private (this is just laziness in my Node.js sample app).\n- The balance unit file has hardcoded ports 9001-9003; it should be relatively easy to dynamically configure balance and send it a signal to reload config.\n- I’d normally use containers so that the dependencies (*e.g.*, Node.js version) is bundled inside the container and doesn’t need to be installed on the host.\n\nLinux init systems such as systemd are the ultimate process monitor, and systemd in particular is so much more than that. It can do all that PM2 and similar tools can do, and then some. The tooling is far superior, it’s more mature, and it has a much larger userbase of seasoned sysadmins.\n\nLearning to use systemd for running your Node.js applications (or any other applications for that matter) is much easier than you might think. Once you’ve spent a little time learning these concepts, I think you’ll agree that Linux is the best tool for the job. After all, you’ll need to configure the Linux init systemd to start PM2 on boot and restart it if it crashes. If you need the Linux init system to start your process monitor, why not just use it to run all your services?\n\n## Further Reading\n\n- [systemd distros](https://en.wikipedia.org/wiki/Systemd#Adoption_and_reception)\n- [Good article on using systemctl](https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units)\n- [Good article on using journalctl](https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs)\n- [The creator of systemd talking about security features](https://www.youtube.com/watch?v=hiW8eIdcRgo&list=PLlh6TqkU8kg_3FpXLlHMnoVqKZysIzXlK&index=6)\n- [Videos from systemd conf 2015](https://www.youtube.com/channel/UCvq_RgZp3kljp9X8Io9Z1DA)\n- [systemd man pages – unit](https://www.freedesktop.org/software/systemd/man/systemd.unit.html)\n- [systemd man pages – service](https://www.freedesktop.org/software/systemd/man/systemd.service.html)\n","slug":"Running-Node-js-on-Linux-with-systemd","published":1,"updated":"2018-06-14T09:00:08.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjruakz58000ml5se5ul2hkgy","content":"<p>今天在思考如何在Linux服务器上不依赖<code>PM2</code>部署直接部署Python Web服务时，碰巧搜到的这片文章。作为一片入门教程，作者给出了非常明确的思路和操作示例，并在字里行间和文末明列出了推荐阅读材料。为推荐给各位阅读，这里我做了全文的复制，<a href=\"https://blog.codeship.com/running-node-js-linux-systemd/\" target=\"_blank\" rel=\"noopener\">原文链接</a>。</p>\n<p>感谢作者<a href=\"https://blog.codeship.com/author/lukebond/\" target=\"_blank\" rel=\"noopener\">Luke Bond</a>，有机会我会将全文翻译成中文。</p>\n<hr>\n<p>The Node.js community has embraced process monitoring tools such as <a href=\"http://pm2.keymetrics.io/\" target=\"_blank\" rel=\"noopener\">PM2</a>, <a href=\"http://nodemon.io/\" target=\"_blank\" rel=\"noopener\">Nodemon</a>, and <a href=\"https://github.com/foreverjs/forever\" target=\"_blank\" rel=\"noopener\">Forever</a>, which is understandable. For example, in addition to process monitoring, PM2 also boasts features around logging and port-sharing or clustering.</p>\n<p>However, I’m a firm believer in using the Linux init system for process monitoring. In this blog post, I’ll show you how to recreate process management, logging and clustering functionality using the Linux init system, systemd, and I’ll make the case for this being a superior approach.</p>\n<p>Please note that I’ve no intention of casting aspersions on any of the tools I’ve mentioned. But I think gaining familiarity with Linux is important for Node.js developers; it’s important to use standard tools that are well-proven and widely understood by sysadmins everywhere.</p>\n<a id=\"more\"></a>\n<h2 id=\"A-Note-about-PM2\"><a href=\"#A-Note-about-PM2\" class=\"headerlink\" title=\"A Note about PM2\"></a>A Note about PM2</h2><p>I will be making reference to PM2 because it has become ubiquitous in the Node.js community, and therefore it will serve as most people’s frame of reference. PM2 makes it very easy to do:</p>\n<ol>\n<li>Process management</li>\n<li>Log management</li>\n<li>Port-sharing magic for Node.js applications</li>\n</ol>\n<p>PM2’s ease of use is certainly one of its strongest points; it hides some of the operational realities of running services on Linux from Node.js developers. In this blog post, I’m going to show you how to do each of these three things with systemd.</p>\n<h2 id=\"An-Explanation-of-Linux-Init-Systems\"><a href=\"#An-Explanation-of-Linux-Init-Systems\" class=\"headerlink\" title=\"An Explanation of Linux Init Systems\"></a>An Explanation of Linux Init Systems</h2><p>Although PM2 and similar tools are ubiquitous in the Node.js world, that’s not necessarily the case in other communities. Running your application with the Linux init system will ensure that it’s familiar to any Linux sysadmin. Therefore, knowing more about Linux, the operating system on which the vast majority of Node.js applications run, is very important for Node.js developers.</p>\n<p>First, let’s run through a brief primer on what Linux init systems are.</p>\n<p>Each Linux distribution has a master process running as PID 1 (process ID 1) that is the ancestor of all processes that run on the system. Even if an application spawns a bunch of child processes and orphans them, the init system will still be their ancestor and will clean them up.</p>\n<p>The init system is responsible for starting and stopping services on boot. Typically, sysadmins will write init scripts to start, stop, and restart each service (<em>e.g.</em>, databases, web servers). Basically, the Linux init system is the ultimate process monitor.</p>\n<p>systemd is more or less the standard Linux system in the latest release of most Linux distributions, so that’s the one I’m going to cover here. It should be relatively easy to translate these concepts into another init system, such as upstart.</p>\n<h2 id=\"Creating-a-Sample-Node-js-Application\"><a href=\"#Creating-a-Sample-Node-js-Application\" class=\"headerlink\" title=\"Creating a Sample Node.js Application\"></a>Creating a Sample Node.js Application</h2><p>To aid explanation, I’m going to use a simple, contrived Node.js application that talks to Redis. It has one HTTP endpoint that outputs “Hello, World!” and a counter taken from Redis. It can be found here:</p>\n<p><a href=\"https://github.com/lukebond/demo-api-redis\" target=\"_blank\" rel=\"noopener\">https://github.com/lukebond/demo-api-redis</a></p>\n<p>You will also need:</p>\n<ul>\n<li>A Linux distribution running <a href=\"https://en.wikipedia.org/wiki/Systemd#Adoption_and_reception\" target=\"_blank\" rel=\"noopener\">systemd</a></li>\n<li>Node.js installed</li>\n<li>Redis installed (but not running)</li>\n</ul>\n<p>Clone the above repository to somewhere in your Linux system and run <code>npm install</code>.</p>\n<h2 id=\"Creating-Unit-Files\"><a href=\"#Creating-Unit-Files\" class=\"headerlink\" title=\"Creating Unit Files\"></a>Creating Unit Files</h2><p>Next we’ll create a <em>unit file</em> for our Node.js service. A unit file is what systemd uses to describe a service, its configuration, how to run it, and so on. It’s a text file similar to an INI file.</p>\n<p>Create the following text file and copy it to <code>/etc/systemd/system/demo-api-redis@.service</code>:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Unit]</span></span><br><span class=\"line\"><span class=\"attr\">Description</span>=HTTP Hello World</span><br><span class=\"line\"><span class=\"attr\">After</span>=network.target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Service]</span></span><br><span class=\"line\"><span class=\"attr\">User</span>=luke</span><br><span class=\"line\"><span class=\"attr\">Environment</span>=REDIS_HOST=localhost</span><br><span class=\"line\"><span class=\"attr\">WorkingDirectory</span>=/home/luke/Development/demo-api-redis</span><br><span class=\"line\"><span class=\"attr\">ExecStart</span>=/usr/bin/node index.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Install]</span></span><br><span class=\"line\"><span class=\"attr\">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Remember! Modify the path on the <code>WorkingDirectory=</code> line to the location where you cloned the git repository.</p>\n</blockquote>\n<p>Now that the unit file is created and is in the correct location on your system, we need to tell systemd to reload its config to pick up the new unit file, then enable and start the service:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl daemon-reload</span><br><span class=\"line\">$ systemctl enable demo-api-redis@1</span><br><span class=\"line\">$ systemctl start demo-api-redis@1</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Learn more about <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units\" target=\"_blank\" rel=\"noopener\">how to use <code>systemctl</code> here</a>.</p>\n</blockquote>\n<p><em>Enabling</em> a service means that systemd will start that service automatically on boot, but it doesn’t start it now. <em>Starting</em> a service is required to start the service now.</p>\n<p>Check the status of the service to see if it worked:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl status demo-api-redis@1</span><br><span class=\"line\">● demo-api-redis@1.service - HTTP Hello World</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: activating (auto-restart) (Result: <span class=\"built_in\">exit</span>-code) since Thu 2016-06-30 17:20:09 BST; 62ms ago</span><br><span class=\"line\">  Process: 29787 ExecStart=/usr/bin/node index.js (code=exited, status=1/FAILURE)</span><br><span class=\"line\"> Main PID: 29787 (code=exited, status=1/FAILURE)</span><br><span class=\"line\"></span><br><span class=\"line\">Jun 30 17:20:09 luke-arch systemd[1]: demo-api-redis@1.service: Main process exited, code=exited, status=1/FAILURE</span><br><span class=\"line\">Jun 30 17:20:09 luke-arch systemd[1]: demo-api-redis@1.service: Unit entered failed state.</span><br><span class=\"line\">Jun 30 17:20:09 luke-arch systemd[1]: demo-api-redis@1.service: Failed with result <span class=\"string\">'exit-code'</span>.</span><br></pre></td></tr></table></figure>\n<p>This is failing because Redis isn’t running. Let’s explore dependencies in systemd!</p>\n<h2 id=\"Exploring-systemd-Dependencies\"><a href=\"#Exploring-systemd-Dependencies\" class=\"headerlink\" title=\"Exploring systemd Dependencies\"></a>Exploring systemd Dependencies</h2><p>We can add the <code>Wants=</code> directive to the <code>[Unit]</code> section of a unit file to declare dependencies between services. There are other directives with different semantics (<em>e.g.</em>, <code>Requires=</code>) but <code>Wants=</code> will cause the depended-upon service (in this case, Redis) to be started when our Node.js service is started.</p>\n<p>Your unit file should now look like this:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Unit]</span></span><br><span class=\"line\"><span class=\"attr\">Description</span>=HTTP Hello World</span><br><span class=\"line\"><span class=\"attr\">After</span>=network.target</span><br><span class=\"line\"><span class=\"attr\">Wants</span>=redis.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Service]</span></span><br><span class=\"line\"><span class=\"attr\">User</span>=luke</span><br><span class=\"line\"><span class=\"attr\">Environment</span>=REDIS_HOST=localhost</span><br><span class=\"line\"><span class=\"attr\">WorkingDirectory</span>=/home/luke/Development/demo-api-redis</span><br><span class=\"line\"><span class=\"attr\">ExecStart</span>=/usr/bin/node index.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Install]</span></span><br><span class=\"line\"><span class=\"attr\">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>\n<p>Signal systemd to reload its config:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n<p>Ask systemd to <code>cat</code> the unit file just to ensure it has picked up our changes:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl cat demo-api-redis@1</span><br><span class=\"line\"><span class=\"comment\"># /etc/systemd/system/demo-api-redis@.service</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=HTTP Hello World</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\">Wants=redis.service</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Environment=REDIS_HOST=localhost</span><br><span class=\"line\">User=luke</span><br><span class=\"line\">WorkingDirectory=/home/luke/Development/demo-api-redis</span><br><span class=\"line\">ExecStart=/usr/bin/node index.js</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<p>And now restart the service. We can see that the service now works:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl restart demo-api-redis@1</span><br><span class=\"line\">$ systemctl status demo-api-redis@1</span><br><span class=\"line\">● demo-api-redis@1.service - HTTP Hello World</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Thu 2016-06-30 17:17:19 BST; 187ms ago</span><br><span class=\"line\"> Main PID: 27050 (node)</span><br><span class=\"line\">    Tasks: 10 (<span class=\"built_in\">limit</span>: 512)</span><br><span class=\"line\">   CGroup: /system.slice/system-demo\\x2dapi\\x2dredis.slice/demo-api-redis@1.service</span><br><span class=\"line\">           └─27050 /usr/bin/node index.js</span><br><span class=\"line\"></span><br><span class=\"line\">Jun 30 17:17:19 luke-arch systemd[1]: Started HTTP Hello World.</span><br><span class=\"line\">$ curl localhost:9000</span><br><span class=\"line\"><span class=\"string\">\"Hello, world 192.168.1.39! 1 hits.\"</span></span><br></pre></td></tr></table></figure>\n<p>It works because it has triggered Redis to run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl status redis</span><br><span class=\"line\">● redis.service - Advanced key-value store</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/redis.service; disabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Fri 2016-07-01 10:31:54 BST; 3s ago</span><br><span class=\"line\"> Main PID: 28643 (redis-server)</span><br><span class=\"line\">    Tasks: 3 (<span class=\"built_in\">limit</span>: 512)</span><br><span class=\"line\">   Memory: 6.3M</span><br><span class=\"line\">      CPU: 10ms</span><br><span class=\"line\">   CGroup: /system.slice/redis.service</span><br><span class=\"line\">           └─28643 /usr/bin/redis-server 127.0.0.1:6379 </span><br><span class=\"line\"></span><br><span class=\"line\">Jul 01 10:31:54 luke-arch redis-server[28643]:   `-._    `-._`-.__.-<span class=\"string\">'_.-'</span>    _.-<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">Jul 01 10:31:54 luke-arch redis-server[28643]:       `-._    `-.__.-'</span>    _.-<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">Jul 01 10:31:54 luke-arch redis-server[28643]:           `-._        _.-'</span></span><br><span class=\"line\">Jul 01 10:31:54 luke-arch redis-server[28643]:               `-.__.-<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">Jul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class=\"line\"><span class=\"string\">Jul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 # Server started, Redis version 3.2.1</span></span><br><span class=\"line\"><span class=\"string\">Jul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add '</span>vm.overcommit_memory</span><br><span class=\"line\">Jul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 <span class=\"comment\"># WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Red</span></span><br><span class=\"line\">Jul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 * DB loaded from disk: 0.000 seconds</span><br><span class=\"line\">Jul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 * The server is now ready to accept connections on port 6379</span><br></pre></td></tr></table></figure>\n<h2 id=\"Process-Management\"><a href=\"#Process-Management\" class=\"headerlink\" title=\"Process Management\"></a>Process Management</h2><p>The first item of PM2 functionality we’re working toward is process management. This means restarting services when they crash and when the machine reboots. Do we have this functionality yet? Let’s find out.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl status demo-api-redis@1 | grep <span class=\"string\">\"PID\"</span></span><br><span class=\"line\"> Main PID: 28649 (node)</span><br><span class=\"line\">$ sudo <span class=\"built_in\">kill</span> -9 28649</span><br><span class=\"line\">$ systemctl status demo-api-redis@1</span><br><span class=\"line\">● demo-api-redis@1.service - HTTP Hello World</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: failed (Result: signal) since Fri 2016-07-01 10:55:49 BST; 2s ago</span><br><span class=\"line\">  Process: 29145 ExecStart=/usr/bin/node index.js (code=killed, signal=KILL)</span><br><span class=\"line\"> Main PID: 29145 (code=killed, signal=KILL)</span><br><span class=\"line\"></span><br><span class=\"line\">Jul 01 10:55:39 luke-arch systemd[1]: Started HTTP Hello World.</span><br><span class=\"line\">Jul 01 10:55:40 luke-arch node[29145]: (node:29145) DeprecationWarning: process.EventEmitter is deprecated. Use require(<span class=\"string\">'events'</span>) instead.</span><br><span class=\"line\">Jul 01 10:55:40 luke-arch node[29145]: Listening on port 9000</span><br><span class=\"line\">Jul 01 10:55:49 luke-arch systemd[1]: demo-api-redis@1.service: Main process exited, code=killed, status=9/KILL</span><br><span class=\"line\">Jul 01 10:55:49 luke-arch systemd[1]: demo-api-redis@1.service: Unit entered failed state.</span><br><span class=\"line\">Jul 01 10:55:49 luke-arch systemd[1]: demo-api-redis@1.service: Failed with result <span class=\"string\">'signal'</span>.</span><br></pre></td></tr></table></figure>\n<p>So systemd is not restarting our service when it crashes, but never fear — systemd has a range of options for configuring this behavior. Adding the following to the <code>[Service]</code> section of our unit file will be fine for our purposes:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Restart</span>=always</span><br><span class=\"line\"><span class=\"attr\">RestartSec</span>=<span class=\"number\">500</span>ms</span><br><span class=\"line\"><span class=\"attr\">StartLimitInterval</span>=<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>This tells systemd to always restart the service after a 500ms delay. You can configure it to give up eventually, but this should be fine for our purposes. Now reload systemd’s config and restart the service and try killing the process:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl daemon-reload</span><br><span class=\"line\">$ systemctl cat demo-api-redis@1</span><br><span class=\"line\"><span class=\"comment\"># /etc/systemd/system/demo-api-redis@.service</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=HTTP Hello World</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\">Wants=redis.service</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Environment=REDIS_HOST=localhost</span><br><span class=\"line\">User=luke</span><br><span class=\"line\">WorkingDirectory=/home/luke/Development/demo-api-redis</span><br><span class=\"line\">ExecStart=/usr/bin/node index.js</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">$ systemctl restart demo-api-redis@1</span><br><span class=\"line\">$ systemctl status demo-api-redis@1.service | grep PID</span><br><span class=\"line\"> Main PID: 29145 (code=killed, signal=KILL)</span><br><span class=\"line\">$ sudo <span class=\"built_in\">kill</span> -9 29145</span><br><span class=\"line\">$ systemctl status demo-api-redis@1</span><br><span class=\"line\">● demo-api-redis@1.service - HTTP Hello World</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; disabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Fri 2016-07-01 11:08:41 BST; 2s ago</span><br><span class=\"line\"> Main PID: 29884 (node)</span><br><span class=\"line\">    Tasks: 10 (<span class=\"built_in\">limit</span>: 512)</span><br><span class=\"line\">   CGroup: /system.slice/system-demo\\x2dapi\\x2dredis.slice/demo-api-redis@1.service</span><br><span class=\"line\">           └─29884 /usr/bin/node index.js</span><br><span class=\"line\"></span><br><span class=\"line\">Jul 01 11:08:41 luke-arch systemd[1]: Stopped HTTP Hello World.</span><br><span class=\"line\">Jul 01 11:08:41 luke-arch systemd[1]: Started HTTP Hello World.</span><br><span class=\"line\">Jul 01 11:08:41 luke-arch node[29884]: (node:29884) DeprecationWarning: process.EventEmitter is deprecated. Use require(<span class=\"string\">'events'</span>) instead.</span><br><span class=\"line\">Jul 01 11:08:41 luke-arch node[29884]: Listening on port 9000</span><br></pre></td></tr></table></figure>\n<p>It works! systemd is now restarting our service when it goes down. It will also start it up automatically if the machine reboots (that’s what it means to <code>enable</code> a service). Go ahead and reboot to prove it.</p>\n<p>We’ve now recreated one of our three PM2 features: process management. Let’s move on to the next one.</p>\n<h2 id=\"Logging\"><a href=\"#Logging\" class=\"headerlink\" title=\"Logging\"></a>Logging</h2><p>This is the easiest of our three target features. systemd has a very powerful logging tool called <code>journalctl</code>. It’s a sysadmin’s Swiss Army knife of logging, and it can do anything you’ll ever need from a logging tool. No Node.js userland tool comes close.</p>\n<p>To scroll through logs for a unit or service:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ journalctl -u demo-api-redis@1</span><br></pre></td></tr></table></figure>\n<p>To follow the same:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ journalctl -u demo-api-redis@1 -f</span><br></pre></td></tr></table></figure>\n<p>You can ask for logs since the last boot:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ journalctl -u demo-api-redis@1 --boot</span><br></pre></td></tr></table></figure>\n<p>Or since a specific time, in various ways:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ journalctl -u demo-api-redis@1 --since 08:00</span><br><span class=\"line\">$ journalctl -u demo-api-redis@1 --since today</span><br><span class=\"line\">$ journalctl -u demo-api-redis@1 --since yesterday</span><br><span class=\"line\">$ journalctl -u demo-api-redis@1 --since 2016-06-02 15:36:00</span><br></pre></td></tr></table></figure>\n<p>You can filter by log level (console.log, console.error, etc.):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ journalctl -u demo-api-redis@1 -p err</span><br></pre></td></tr></table></figure>\n<p>There is so much more you can do; it’s super powerful. <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs\" target=\"_blank\" rel=\"noopener\">This article is a great place to start to learn all about <code>journalctl</code>.</a></p>\n<h2 id=\"Multiple-Instances\"><a href=\"#Multiple-Instances\" class=\"headerlink\" title=\"Multiple Instances\"></a>Multiple Instances</h2><p>We’ve covered two of our three features now. The last one is port sharing, or clustering as it is often called in the Node.js world. But before we can address that, we need to be able to run multiple instances of our service.</p>\n<p>You may have noticed that our unit file has an <code>@</code> symbol in the filename, and that we’ve been referring to our service as <code>demo-api-redis@1</code>. The <code>1</code> after the <code>@</code> symbol is the instance name (it doesn’t have to be a number). We could run two more instances of our service using something like <code>systemctl start demo-api-redis@{2,3}</code>, but first we need them to bind to different ports or they’ll clash.</p>\n<p>Our sample app takes an environment variable to set the port, so we can use the instance name to give each service a unique port. Add the following additional <code>Environment=</code> line to the <code>[Service]</code> section of the unit file:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Environment</span>=LISTEN_PORT=<span class=\"number\">900</span>%i</span><br></pre></td></tr></table></figure>\n<p>This will mean that <code>demo-api-redis@1</code> will get port <code>9001</code>, <code>demo-api-redis@2</code> will get port <code>9002</code>, and <code>demo-api-redis@3</code> will get port <code>9003</code>, leaving <code>9000</code> for our load balancer.</p>\n<p>Once you’ve edited the unit file, you need to reload the config, check that it’s correct, start two new instances, and restart the existing one:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl daemon-reload</span><br><span class=\"line\">$ systemctl cat demo-api-redis@1</span><br><span class=\"line\"><span class=\"comment\"># /etc/systemd/system/demo-api-redis@.service</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=HTTP Hello World</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\">Wants=redis.service</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Environment=REDIS_HOST=localhost</span><br><span class=\"line\">Environment=LISTEN_PORT=900%i</span><br><span class=\"line\">User=luke</span><br><span class=\"line\">WorkingDirectory=/home/luke/Development/demo-api-redis</span><br><span class=\"line\">ExecStart=/usr/bin/node index.js</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\">RestartSec=500ms</span><br><span class=\"line\">StartLimitInterval=0</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> demo-api-redis@&#123;2,3&#125;</span><br><span class=\"line\">$ systemctl start demo-api-redis@&#123;2,3&#125;</span><br><span class=\"line\">$ systemctl restart demo-api-redis@1</span><br><span class=\"line\">$ systemctl status demo-api-redis@&#123;1,2,3&#125;</span><br><span class=\"line\">● demo-api-redis@1.service - HTTP Hello World</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Fri 2016-07-01 11:08:41 BST; 56min ago</span><br><span class=\"line\"> Main PID: 29884 (node)</span><br><span class=\"line\">   CGroup: /system.slice/system-demo\\x2dapi\\x2dredis.slice/demo-api-redis@1.service</span><br><span class=\"line\">           └─29884 /usr/bin/node index.js</span><br><span class=\"line\"></span><br><span class=\"line\">Jul 01 11:08:41 luke-arch systemd[1]: Stopped HTTP Hello World.</span><br><span class=\"line\">Jul 01 11:08:41 luke-arch systemd[1]: Started HTTP Hello World.</span><br><span class=\"line\">Jul 01 11:08:41 luke-arch node[29884]: (node:29884) DeprecationWarning: process.EventEmitter is deprecated. Use require(<span class=\"string\">'events'</span>) instead.</span><br><span class=\"line\">Jul 01 11:08:41 luke-arch node[29884]: Listening on port 9001</span><br><span class=\"line\"></span><br><span class=\"line\">● demo-api-redis@2.service - HTTP Hello World</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Fri 2016-07-01 12:04:34 BST; 18s ago</span><br><span class=\"line\"> Main PID: 30747 (node)</span><br><span class=\"line\">   CGroup: /system.slice/system-demo\\x2dapi\\x2dredis.slice/demo-api-redis@2.service</span><br><span class=\"line\">           └─30747 /usr/bin/node index.js</span><br><span class=\"line\"></span><br><span class=\"line\">Jul 01 12:04:34 luke-arch systemd[1]: Started HTTP Hello World.</span><br><span class=\"line\">Jul 01 12:04:34 luke-arch node[30747]: (node:30747) DeprecationWarning: process.EventEmitter is deprecated. Use require(<span class=\"string\">'events'</span>) instead.</span><br><span class=\"line\">Jul 01 12:04:34 luke-arch node[30747]: Listening on port 9002</span><br><span class=\"line\"></span><br><span class=\"line\">● demo-api-redis@3.service - HTTP Hello World</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Fri 2016-07-01 12:04:34 BST; 18s ago</span><br><span class=\"line\"> Main PID: 30753 (node)</span><br><span class=\"line\">   CGroup: /system.slice/system-demo\\x2dapi\\x2dredis.slice/demo-api-redis@3.service</span><br><span class=\"line\">           └─30753 /usr/bin/node index.js</span><br><span class=\"line\"></span><br><span class=\"line\">Jul 01 12:04:34 luke-arch systemd[1]: Started HTTP Hello World.</span><br><span class=\"line\">Jul 01 12:04:34 luke-arch node[30753]: (node:30753) DeprecationWarning: process.EventEmitter is deprecated. Use require(<span class=\"string\">'events'</span>) instead.</span><br><span class=\"line\">Jul 01 12:04:34 luke-arch node[30753]: Listening on port 9003</span><br></pre></td></tr></table></figure>\n<p>We should now be able to curl each of these:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl localhost:900&#123;1,2,3&#125;</span><br><span class=\"line\"><span class=\"string\">\"Hello, world 192.168.1.39! 52 hits.\"</span><span class=\"string\">\"Hello, world 192.168.1.39! 53 hits.\"</span><span class=\"string\">\"Hello, world 192.168.1.39! 54 hits.\"</span></span><br></pre></td></tr></table></figure>\n<p>I’m assuming a 4-core machine, so I’m running three instances, leaving one core for Redis (which is probably not necessary). Adjust this accordingly for your environment and application.</p>\n<p>Now, on to the final part: load balancing.</p>\n<h2 id=\"Load-Balancing\"><a href=\"#Load-Balancing\" class=\"headerlink\" title=\"Load Balancing\"></a>Load Balancing</h2><p>One could use NGINX or HAProxy to balance the traffic across the instances of our service. However, since I’m claiming that it’s super simple to replace PM2 functionality, I wanted to go with something lighter.</p>\n<p><a href=\"https://www.inlab.de/balance.html\" target=\"_blank\" rel=\"noopener\">Balance</a> is a tiny (few-hundred lines of C) TCP load balancer that’s fast and simple to use. For example:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ balance -f 9000 127.0.0.1:900&#123;1,2,3&#125; &amp;</span><br><span class=\"line\">$ curl localhost:9000</span><br><span class=\"line\"><span class=\"string\">\"Hello, world 192.168.1.39! 20 hits.\"</span></span><br></pre></td></tr></table></figure>\n<p>The above one-liner launches balance, listening on port <code>9000</code> and balancing across ports <code>9001-9003</code>. But we don’t want to run it in the foreground like this. Let’s write a unit file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /etc/systemd/system/balance.service</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Balance - Simple TCP Load Balancer</span><br><span class=\"line\">After=syslog.target network.target nss-lookup.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/usr/bin/balance -f 9000 127.0.0.1:9001 127.0.0.1:9002 127.0.0.1:9003</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">$ systemctl daemon-reload</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> balance</span><br><span class=\"line\">$ systemctl start balance</span><br><span class=\"line\">$ systemctl status balance</span><br><span class=\"line\">● balance.service - Balance - Simple TCP Load Balancer</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/balance.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Fri 2016-07-01 13:56:46 BST; 3s ago</span><br><span class=\"line\"> Main PID: 32674 (balance)</span><br><span class=\"line\">    Tasks: 1 (<span class=\"built_in\">limit</span>: 512)</span><br><span class=\"line\">   Memory: 316.0K</span><br><span class=\"line\">      CPU: 10ms</span><br><span class=\"line\">   CGroup: /system.slice/balance.service</span><br><span class=\"line\">           └─32674 /usr/bin/balance -f 9000 127.0.0.1:9001 127.0.0.1:9002 127.0.0.1:9003</span><br><span class=\"line\"></span><br><span class=\"line\">Jul 01 13:56:46 luke-arch systemd[1]: Started Balance - Simple TCP Load Balancer.</span><br><span class=\"line\">$ curl localhost:9000</span><br><span class=\"line\"><span class=\"string\">\"Hello, world 192.168.1.39! 21 hits.\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>We’ve successfully recreated the three main features of PM2 using basic Linux tools, in fact, mostly just systemd. But this is only a very basic implementation. There are a number of details I’ve overlooked for the sake of simplicity:</p>\n<ul>\n<li>SSL termination.</li>\n<li>Ports <code>9001-9003</code> are currently bound to the public IP, not the private (this is just laziness in my Node.js sample app).</li>\n<li>The balance unit file has hardcoded ports 9001-9003; it should be relatively easy to dynamically configure balance and send it a signal to reload config.</li>\n<li>I’d normally use containers so that the dependencies (<em>e.g.</em>, Node.js version) is bundled inside the container and doesn’t need to be installed on the host.</li>\n</ul>\n<p>Linux init systems such as systemd are the ultimate process monitor, and systemd in particular is so much more than that. It can do all that PM2 and similar tools can do, and then some. The tooling is far superior, it’s more mature, and it has a much larger userbase of seasoned sysadmins.</p>\n<p>Learning to use systemd for running your Node.js applications (or any other applications for that matter) is much easier than you might think. Once you’ve spent a little time learning these concepts, I think you’ll agree that Linux is the best tool for the job. After all, you’ll need to configure the Linux init systemd to start PM2 on boot and restart it if it crashes. If you need the Linux init system to start your process monitor, why not just use it to run all your services?</p>\n<h2 id=\"Further-Reading\"><a href=\"#Further-Reading\" class=\"headerlink\" title=\"Further Reading\"></a>Further Reading</h2><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Systemd#Adoption_and_reception\" target=\"_blank\" rel=\"noopener\">systemd distros</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units\" target=\"_blank\" rel=\"noopener\">Good article on using systemctl</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs\" target=\"_blank\" rel=\"noopener\">Good article on using journalctl</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=hiW8eIdcRgo&amp;list=PLlh6TqkU8kg_3FpXLlHMnoVqKZysIzXlK&amp;index=6\" target=\"_blank\" rel=\"noopener\">The creator of systemd talking about security features</a></li>\n<li><a href=\"https://www.youtube.com/channel/UCvq_RgZp3kljp9X8Io9Z1DA\" target=\"_blank\" rel=\"noopener\">Videos from systemd conf 2015</a></li>\n<li><a href=\"https://www.freedesktop.org/software/systemd/man/systemd.unit.html\" target=\"_blank\" rel=\"noopener\">systemd man pages – unit</a></li>\n<li><a href=\"https://www.freedesktop.org/software/systemd/man/systemd.service.html\" target=\"_blank\" rel=\"noopener\">systemd man pages – service</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>今天在思考如何在Linux服务器上不依赖<code>PM2</code>部署直接部署Python Web服务时，碰巧搜到的这片文章。作为一片入门教程，作者给出了非常明确的思路和操作示例，并在字里行间和文末明列出了推荐阅读材料。为推荐给各位阅读，这里我做了全文的复制，<a href=\"https://blog.codeship.com/running-node-js-linux-systemd/\" target=\"_blank\" rel=\"noopener\">原文链接</a>。</p>\n<p>感谢作者<a href=\"https://blog.codeship.com/author/lukebond/\" target=\"_blank\" rel=\"noopener\">Luke Bond</a>，有机会我会将全文翻译成中文。</p>\n<hr>\n<p>The Node.js community has embraced process monitoring tools such as <a href=\"http://pm2.keymetrics.io/\" target=\"_blank\" rel=\"noopener\">PM2</a>, <a href=\"http://nodemon.io/\" target=\"_blank\" rel=\"noopener\">Nodemon</a>, and <a href=\"https://github.com/foreverjs/forever\" target=\"_blank\" rel=\"noopener\">Forever</a>, which is understandable. For example, in addition to process monitoring, PM2 also boasts features around logging and port-sharing or clustering.</p>\n<p>However, I’m a firm believer in using the Linux init system for process monitoring. In this blog post, I’ll show you how to recreate process management, logging and clustering functionality using the Linux init system, systemd, and I’ll make the case for this being a superior approach.</p>\n<p>Please note that I’ve no intention of casting aspersions on any of the tools I’ve mentioned. But I think gaining familiarity with Linux is important for Node.js developers; it’s important to use standard tools that are well-proven and widely understood by sysadmins everywhere.</p>","more":"<h2 id=\"A-Note-about-PM2\"><a href=\"#A-Note-about-PM2\" class=\"headerlink\" title=\"A Note about PM2\"></a>A Note about PM2</h2><p>I will be making reference to PM2 because it has become ubiquitous in the Node.js community, and therefore it will serve as most people’s frame of reference. PM2 makes it very easy to do:</p>\n<ol>\n<li>Process management</li>\n<li>Log management</li>\n<li>Port-sharing magic for Node.js applications</li>\n</ol>\n<p>PM2’s ease of use is certainly one of its strongest points; it hides some of the operational realities of running services on Linux from Node.js developers. In this blog post, I’m going to show you how to do each of these three things with systemd.</p>\n<h2 id=\"An-Explanation-of-Linux-Init-Systems\"><a href=\"#An-Explanation-of-Linux-Init-Systems\" class=\"headerlink\" title=\"An Explanation of Linux Init Systems\"></a>An Explanation of Linux Init Systems</h2><p>Although PM2 and similar tools are ubiquitous in the Node.js world, that’s not necessarily the case in other communities. Running your application with the Linux init system will ensure that it’s familiar to any Linux sysadmin. Therefore, knowing more about Linux, the operating system on which the vast majority of Node.js applications run, is very important for Node.js developers.</p>\n<p>First, let’s run through a brief primer on what Linux init systems are.</p>\n<p>Each Linux distribution has a master process running as PID 1 (process ID 1) that is the ancestor of all processes that run on the system. Even if an application spawns a bunch of child processes and orphans them, the init system will still be their ancestor and will clean them up.</p>\n<p>The init system is responsible for starting and stopping services on boot. Typically, sysadmins will write init scripts to start, stop, and restart each service (<em>e.g.</em>, databases, web servers). Basically, the Linux init system is the ultimate process monitor.</p>\n<p>systemd is more or less the standard Linux system in the latest release of most Linux distributions, so that’s the one I’m going to cover here. It should be relatively easy to translate these concepts into another init system, such as upstart.</p>\n<h2 id=\"Creating-a-Sample-Node-js-Application\"><a href=\"#Creating-a-Sample-Node-js-Application\" class=\"headerlink\" title=\"Creating a Sample Node.js Application\"></a>Creating a Sample Node.js Application</h2><p>To aid explanation, I’m going to use a simple, contrived Node.js application that talks to Redis. It has one HTTP endpoint that outputs “Hello, World!” and a counter taken from Redis. It can be found here:</p>\n<p><a href=\"https://github.com/lukebond/demo-api-redis\" target=\"_blank\" rel=\"noopener\">https://github.com/lukebond/demo-api-redis</a></p>\n<p>You will also need:</p>\n<ul>\n<li>A Linux distribution running <a href=\"https://en.wikipedia.org/wiki/Systemd#Adoption_and_reception\" target=\"_blank\" rel=\"noopener\">systemd</a></li>\n<li>Node.js installed</li>\n<li>Redis installed (but not running)</li>\n</ul>\n<p>Clone the above repository to somewhere in your Linux system and run <code>npm install</code>.</p>\n<h2 id=\"Creating-Unit-Files\"><a href=\"#Creating-Unit-Files\" class=\"headerlink\" title=\"Creating Unit Files\"></a>Creating Unit Files</h2><p>Next we’ll create a <em>unit file</em> for our Node.js service. A unit file is what systemd uses to describe a service, its configuration, how to run it, and so on. It’s a text file similar to an INI file.</p>\n<p>Create the following text file and copy it to <code>/etc/systemd/system/demo-api-redis@.service</code>:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Unit]</span></span><br><span class=\"line\"><span class=\"attr\">Description</span>=HTTP Hello World</span><br><span class=\"line\"><span class=\"attr\">After</span>=network.target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Service]</span></span><br><span class=\"line\"><span class=\"attr\">User</span>=luke</span><br><span class=\"line\"><span class=\"attr\">Environment</span>=REDIS_HOST=localhost</span><br><span class=\"line\"><span class=\"attr\">WorkingDirectory</span>=/home/luke/Development/demo-api-redis</span><br><span class=\"line\"><span class=\"attr\">ExecStart</span>=/usr/bin/node index.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Install]</span></span><br><span class=\"line\"><span class=\"attr\">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Remember! Modify the path on the <code>WorkingDirectory=</code> line to the location where you cloned the git repository.</p>\n</blockquote>\n<p>Now that the unit file is created and is in the correct location on your system, we need to tell systemd to reload its config to pick up the new unit file, then enable and start the service:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl daemon-reload</span><br><span class=\"line\">$ systemctl enable demo-api-redis@1</span><br><span class=\"line\">$ systemctl start demo-api-redis@1</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Learn more about <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units\" target=\"_blank\" rel=\"noopener\">how to use <code>systemctl</code> here</a>.</p>\n</blockquote>\n<p><em>Enabling</em> a service means that systemd will start that service automatically on boot, but it doesn’t start it now. <em>Starting</em> a service is required to start the service now.</p>\n<p>Check the status of the service to see if it worked:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl status demo-api-redis@1</span><br><span class=\"line\">● demo-api-redis@1.service - HTTP Hello World</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: activating (auto-restart) (Result: <span class=\"built_in\">exit</span>-code) since Thu 2016-06-30 17:20:09 BST; 62ms ago</span><br><span class=\"line\">  Process: 29787 ExecStart=/usr/bin/node index.js (code=exited, status=1/FAILURE)</span><br><span class=\"line\"> Main PID: 29787 (code=exited, status=1/FAILURE)</span><br><span class=\"line\"></span><br><span class=\"line\">Jun 30 17:20:09 luke-arch systemd[1]: demo-api-redis@1.service: Main process exited, code=exited, status=1/FAILURE</span><br><span class=\"line\">Jun 30 17:20:09 luke-arch systemd[1]: demo-api-redis@1.service: Unit entered failed state.</span><br><span class=\"line\">Jun 30 17:20:09 luke-arch systemd[1]: demo-api-redis@1.service: Failed with result <span class=\"string\">'exit-code'</span>.</span><br></pre></td></tr></table></figure>\n<p>This is failing because Redis isn’t running. Let’s explore dependencies in systemd!</p>\n<h2 id=\"Exploring-systemd-Dependencies\"><a href=\"#Exploring-systemd-Dependencies\" class=\"headerlink\" title=\"Exploring systemd Dependencies\"></a>Exploring systemd Dependencies</h2><p>We can add the <code>Wants=</code> directive to the <code>[Unit]</code> section of a unit file to declare dependencies between services. There are other directives with different semantics (<em>e.g.</em>, <code>Requires=</code>) but <code>Wants=</code> will cause the depended-upon service (in this case, Redis) to be started when our Node.js service is started.</p>\n<p>Your unit file should now look like this:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Unit]</span></span><br><span class=\"line\"><span class=\"attr\">Description</span>=HTTP Hello World</span><br><span class=\"line\"><span class=\"attr\">After</span>=network.target</span><br><span class=\"line\"><span class=\"attr\">Wants</span>=redis.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Service]</span></span><br><span class=\"line\"><span class=\"attr\">User</span>=luke</span><br><span class=\"line\"><span class=\"attr\">Environment</span>=REDIS_HOST=localhost</span><br><span class=\"line\"><span class=\"attr\">WorkingDirectory</span>=/home/luke/Development/demo-api-redis</span><br><span class=\"line\"><span class=\"attr\">ExecStart</span>=/usr/bin/node index.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Install]</span></span><br><span class=\"line\"><span class=\"attr\">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>\n<p>Signal systemd to reload its config:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n<p>Ask systemd to <code>cat</code> the unit file just to ensure it has picked up our changes:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl cat demo-api-redis@1</span><br><span class=\"line\"><span class=\"comment\"># /etc/systemd/system/demo-api-redis@.service</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=HTTP Hello World</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\">Wants=redis.service</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Environment=REDIS_HOST=localhost</span><br><span class=\"line\">User=luke</span><br><span class=\"line\">WorkingDirectory=/home/luke/Development/demo-api-redis</span><br><span class=\"line\">ExecStart=/usr/bin/node index.js</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<p>And now restart the service. We can see that the service now works:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl restart demo-api-redis@1</span><br><span class=\"line\">$ systemctl status demo-api-redis@1</span><br><span class=\"line\">● demo-api-redis@1.service - HTTP Hello World</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Thu 2016-06-30 17:17:19 BST; 187ms ago</span><br><span class=\"line\"> Main PID: 27050 (node)</span><br><span class=\"line\">    Tasks: 10 (<span class=\"built_in\">limit</span>: 512)</span><br><span class=\"line\">   CGroup: /system.slice/system-demo\\x2dapi\\x2dredis.slice/demo-api-redis@1.service</span><br><span class=\"line\">           └─27050 /usr/bin/node index.js</span><br><span class=\"line\"></span><br><span class=\"line\">Jun 30 17:17:19 luke-arch systemd[1]: Started HTTP Hello World.</span><br><span class=\"line\">$ curl localhost:9000</span><br><span class=\"line\"><span class=\"string\">\"Hello, world 192.168.1.39! 1 hits.\"</span></span><br></pre></td></tr></table></figure>\n<p>It works because it has triggered Redis to run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl status redis</span><br><span class=\"line\">● redis.service - Advanced key-value store</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/redis.service; disabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Fri 2016-07-01 10:31:54 BST; 3s ago</span><br><span class=\"line\"> Main PID: 28643 (redis-server)</span><br><span class=\"line\">    Tasks: 3 (<span class=\"built_in\">limit</span>: 512)</span><br><span class=\"line\">   Memory: 6.3M</span><br><span class=\"line\">      CPU: 10ms</span><br><span class=\"line\">   CGroup: /system.slice/redis.service</span><br><span class=\"line\">           └─28643 /usr/bin/redis-server 127.0.0.1:6379 </span><br><span class=\"line\"></span><br><span class=\"line\">Jul 01 10:31:54 luke-arch redis-server[28643]:   `-._    `-._`-.__.-<span class=\"string\">'_.-'</span>    _.-<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">Jul 01 10:31:54 luke-arch redis-server[28643]:       `-._    `-.__.-'</span>    _.-<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">Jul 01 10:31:54 luke-arch redis-server[28643]:           `-._        _.-'</span></span><br><span class=\"line\">Jul 01 10:31:54 luke-arch redis-server[28643]:               `-.__.-<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">Jul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class=\"line\"><span class=\"string\">Jul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 # Server started, Redis version 3.2.1</span></span><br><span class=\"line\"><span class=\"string\">Jul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add '</span>vm.overcommit_memory</span><br><span class=\"line\">Jul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 <span class=\"comment\"># WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Red</span></span><br><span class=\"line\">Jul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 * DB loaded from disk: 0.000 seconds</span><br><span class=\"line\">Jul 01 10:31:54 luke-arch redis-server[28643]: 28643:M 01 Jul 10:31:54.216 * The server is now ready to accept connections on port 6379</span><br></pre></td></tr></table></figure>\n<h2 id=\"Process-Management\"><a href=\"#Process-Management\" class=\"headerlink\" title=\"Process Management\"></a>Process Management</h2><p>The first item of PM2 functionality we’re working toward is process management. This means restarting services when they crash and when the machine reboots. Do we have this functionality yet? Let’s find out.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl status demo-api-redis@1 | grep <span class=\"string\">\"PID\"</span></span><br><span class=\"line\"> Main PID: 28649 (node)</span><br><span class=\"line\">$ sudo <span class=\"built_in\">kill</span> -9 28649</span><br><span class=\"line\">$ systemctl status demo-api-redis@1</span><br><span class=\"line\">● demo-api-redis@1.service - HTTP Hello World</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: failed (Result: signal) since Fri 2016-07-01 10:55:49 BST; 2s ago</span><br><span class=\"line\">  Process: 29145 ExecStart=/usr/bin/node index.js (code=killed, signal=KILL)</span><br><span class=\"line\"> Main PID: 29145 (code=killed, signal=KILL)</span><br><span class=\"line\"></span><br><span class=\"line\">Jul 01 10:55:39 luke-arch systemd[1]: Started HTTP Hello World.</span><br><span class=\"line\">Jul 01 10:55:40 luke-arch node[29145]: (node:29145) DeprecationWarning: process.EventEmitter is deprecated. Use require(<span class=\"string\">'events'</span>) instead.</span><br><span class=\"line\">Jul 01 10:55:40 luke-arch node[29145]: Listening on port 9000</span><br><span class=\"line\">Jul 01 10:55:49 luke-arch systemd[1]: demo-api-redis@1.service: Main process exited, code=killed, status=9/KILL</span><br><span class=\"line\">Jul 01 10:55:49 luke-arch systemd[1]: demo-api-redis@1.service: Unit entered failed state.</span><br><span class=\"line\">Jul 01 10:55:49 luke-arch systemd[1]: demo-api-redis@1.service: Failed with result <span class=\"string\">'signal'</span>.</span><br></pre></td></tr></table></figure>\n<p>So systemd is not restarting our service when it crashes, but never fear — systemd has a range of options for configuring this behavior. Adding the following to the <code>[Service]</code> section of our unit file will be fine for our purposes:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Restart</span>=always</span><br><span class=\"line\"><span class=\"attr\">RestartSec</span>=<span class=\"number\">500</span>ms</span><br><span class=\"line\"><span class=\"attr\">StartLimitInterval</span>=<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>This tells systemd to always restart the service after a 500ms delay. You can configure it to give up eventually, but this should be fine for our purposes. Now reload systemd’s config and restart the service and try killing the process:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl daemon-reload</span><br><span class=\"line\">$ systemctl cat demo-api-redis@1</span><br><span class=\"line\"><span class=\"comment\"># /etc/systemd/system/demo-api-redis@.service</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=HTTP Hello World</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\">Wants=redis.service</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Environment=REDIS_HOST=localhost</span><br><span class=\"line\">User=luke</span><br><span class=\"line\">WorkingDirectory=/home/luke/Development/demo-api-redis</span><br><span class=\"line\">ExecStart=/usr/bin/node index.js</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">$ systemctl restart demo-api-redis@1</span><br><span class=\"line\">$ systemctl status demo-api-redis@1.service | grep PID</span><br><span class=\"line\"> Main PID: 29145 (code=killed, signal=KILL)</span><br><span class=\"line\">$ sudo <span class=\"built_in\">kill</span> -9 29145</span><br><span class=\"line\">$ systemctl status demo-api-redis@1</span><br><span class=\"line\">● demo-api-redis@1.service - HTTP Hello World</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; disabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Fri 2016-07-01 11:08:41 BST; 2s ago</span><br><span class=\"line\"> Main PID: 29884 (node)</span><br><span class=\"line\">    Tasks: 10 (<span class=\"built_in\">limit</span>: 512)</span><br><span class=\"line\">   CGroup: /system.slice/system-demo\\x2dapi\\x2dredis.slice/demo-api-redis@1.service</span><br><span class=\"line\">           └─29884 /usr/bin/node index.js</span><br><span class=\"line\"></span><br><span class=\"line\">Jul 01 11:08:41 luke-arch systemd[1]: Stopped HTTP Hello World.</span><br><span class=\"line\">Jul 01 11:08:41 luke-arch systemd[1]: Started HTTP Hello World.</span><br><span class=\"line\">Jul 01 11:08:41 luke-arch node[29884]: (node:29884) DeprecationWarning: process.EventEmitter is deprecated. Use require(<span class=\"string\">'events'</span>) instead.</span><br><span class=\"line\">Jul 01 11:08:41 luke-arch node[29884]: Listening on port 9000</span><br></pre></td></tr></table></figure>\n<p>It works! systemd is now restarting our service when it goes down. It will also start it up automatically if the machine reboots (that’s what it means to <code>enable</code> a service). Go ahead and reboot to prove it.</p>\n<p>We’ve now recreated one of our three PM2 features: process management. Let’s move on to the next one.</p>\n<h2 id=\"Logging\"><a href=\"#Logging\" class=\"headerlink\" title=\"Logging\"></a>Logging</h2><p>This is the easiest of our three target features. systemd has a very powerful logging tool called <code>journalctl</code>. It’s a sysadmin’s Swiss Army knife of logging, and it can do anything you’ll ever need from a logging tool. No Node.js userland tool comes close.</p>\n<p>To scroll through logs for a unit or service:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ journalctl -u demo-api-redis@1</span><br></pre></td></tr></table></figure>\n<p>To follow the same:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ journalctl -u demo-api-redis@1 -f</span><br></pre></td></tr></table></figure>\n<p>You can ask for logs since the last boot:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ journalctl -u demo-api-redis@1 --boot</span><br></pre></td></tr></table></figure>\n<p>Or since a specific time, in various ways:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ journalctl -u demo-api-redis@1 --since 08:00</span><br><span class=\"line\">$ journalctl -u demo-api-redis@1 --since today</span><br><span class=\"line\">$ journalctl -u demo-api-redis@1 --since yesterday</span><br><span class=\"line\">$ journalctl -u demo-api-redis@1 --since 2016-06-02 15:36:00</span><br></pre></td></tr></table></figure>\n<p>You can filter by log level (console.log, console.error, etc.):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ journalctl -u demo-api-redis@1 -p err</span><br></pre></td></tr></table></figure>\n<p>There is so much more you can do; it’s super powerful. <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs\" target=\"_blank\" rel=\"noopener\">This article is a great place to start to learn all about <code>journalctl</code>.</a></p>\n<h2 id=\"Multiple-Instances\"><a href=\"#Multiple-Instances\" class=\"headerlink\" title=\"Multiple Instances\"></a>Multiple Instances</h2><p>We’ve covered two of our three features now. The last one is port sharing, or clustering as it is often called in the Node.js world. But before we can address that, we need to be able to run multiple instances of our service.</p>\n<p>You may have noticed that our unit file has an <code>@</code> symbol in the filename, and that we’ve been referring to our service as <code>demo-api-redis@1</code>. The <code>1</code> after the <code>@</code> symbol is the instance name (it doesn’t have to be a number). We could run two more instances of our service using something like <code>systemctl start demo-api-redis@{2,3}</code>, but first we need them to bind to different ports or they’ll clash.</p>\n<p>Our sample app takes an environment variable to set the port, so we can use the instance name to give each service a unique port. Add the following additional <code>Environment=</code> line to the <code>[Service]</code> section of the unit file:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Environment</span>=LISTEN_PORT=<span class=\"number\">900</span>%i</span><br></pre></td></tr></table></figure>\n<p>This will mean that <code>demo-api-redis@1</code> will get port <code>9001</code>, <code>demo-api-redis@2</code> will get port <code>9002</code>, and <code>demo-api-redis@3</code> will get port <code>9003</code>, leaving <code>9000</code> for our load balancer.</p>\n<p>Once you’ve edited the unit file, you need to reload the config, check that it’s correct, start two new instances, and restart the existing one:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl daemon-reload</span><br><span class=\"line\">$ systemctl cat demo-api-redis@1</span><br><span class=\"line\"><span class=\"comment\"># /etc/systemd/system/demo-api-redis@.service</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=HTTP Hello World</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\">Wants=redis.service</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Environment=REDIS_HOST=localhost</span><br><span class=\"line\">Environment=LISTEN_PORT=900%i</span><br><span class=\"line\">User=luke</span><br><span class=\"line\">WorkingDirectory=/home/luke/Development/demo-api-redis</span><br><span class=\"line\">ExecStart=/usr/bin/node index.js</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\">RestartSec=500ms</span><br><span class=\"line\">StartLimitInterval=0</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> demo-api-redis@&#123;2,3&#125;</span><br><span class=\"line\">$ systemctl start demo-api-redis@&#123;2,3&#125;</span><br><span class=\"line\">$ systemctl restart demo-api-redis@1</span><br><span class=\"line\">$ systemctl status demo-api-redis@&#123;1,2,3&#125;</span><br><span class=\"line\">● demo-api-redis@1.service - HTTP Hello World</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Fri 2016-07-01 11:08:41 BST; 56min ago</span><br><span class=\"line\"> Main PID: 29884 (node)</span><br><span class=\"line\">   CGroup: /system.slice/system-demo\\x2dapi\\x2dredis.slice/demo-api-redis@1.service</span><br><span class=\"line\">           └─29884 /usr/bin/node index.js</span><br><span class=\"line\"></span><br><span class=\"line\">Jul 01 11:08:41 luke-arch systemd[1]: Stopped HTTP Hello World.</span><br><span class=\"line\">Jul 01 11:08:41 luke-arch systemd[1]: Started HTTP Hello World.</span><br><span class=\"line\">Jul 01 11:08:41 luke-arch node[29884]: (node:29884) DeprecationWarning: process.EventEmitter is deprecated. Use require(<span class=\"string\">'events'</span>) instead.</span><br><span class=\"line\">Jul 01 11:08:41 luke-arch node[29884]: Listening on port 9001</span><br><span class=\"line\"></span><br><span class=\"line\">● demo-api-redis@2.service - HTTP Hello World</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Fri 2016-07-01 12:04:34 BST; 18s ago</span><br><span class=\"line\"> Main PID: 30747 (node)</span><br><span class=\"line\">   CGroup: /system.slice/system-demo\\x2dapi\\x2dredis.slice/demo-api-redis@2.service</span><br><span class=\"line\">           └─30747 /usr/bin/node index.js</span><br><span class=\"line\"></span><br><span class=\"line\">Jul 01 12:04:34 luke-arch systemd[1]: Started HTTP Hello World.</span><br><span class=\"line\">Jul 01 12:04:34 luke-arch node[30747]: (node:30747) DeprecationWarning: process.EventEmitter is deprecated. Use require(<span class=\"string\">'events'</span>) instead.</span><br><span class=\"line\">Jul 01 12:04:34 luke-arch node[30747]: Listening on port 9002</span><br><span class=\"line\"></span><br><span class=\"line\">● demo-api-redis@3.service - HTTP Hello World</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/demo-api-redis@.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Fri 2016-07-01 12:04:34 BST; 18s ago</span><br><span class=\"line\"> Main PID: 30753 (node)</span><br><span class=\"line\">   CGroup: /system.slice/system-demo\\x2dapi\\x2dredis.slice/demo-api-redis@3.service</span><br><span class=\"line\">           └─30753 /usr/bin/node index.js</span><br><span class=\"line\"></span><br><span class=\"line\">Jul 01 12:04:34 luke-arch systemd[1]: Started HTTP Hello World.</span><br><span class=\"line\">Jul 01 12:04:34 luke-arch node[30753]: (node:30753) DeprecationWarning: process.EventEmitter is deprecated. Use require(<span class=\"string\">'events'</span>) instead.</span><br><span class=\"line\">Jul 01 12:04:34 luke-arch node[30753]: Listening on port 9003</span><br></pre></td></tr></table></figure>\n<p>We should now be able to curl each of these:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl localhost:900&#123;1,2,3&#125;</span><br><span class=\"line\"><span class=\"string\">\"Hello, world 192.168.1.39! 52 hits.\"</span><span class=\"string\">\"Hello, world 192.168.1.39! 53 hits.\"</span><span class=\"string\">\"Hello, world 192.168.1.39! 54 hits.\"</span></span><br></pre></td></tr></table></figure>\n<p>I’m assuming a 4-core machine, so I’m running three instances, leaving one core for Redis (which is probably not necessary). Adjust this accordingly for your environment and application.</p>\n<p>Now, on to the final part: load balancing.</p>\n<h2 id=\"Load-Balancing\"><a href=\"#Load-Balancing\" class=\"headerlink\" title=\"Load Balancing\"></a>Load Balancing</h2><p>One could use NGINX or HAProxy to balance the traffic across the instances of our service. However, since I’m claiming that it’s super simple to replace PM2 functionality, I wanted to go with something lighter.</p>\n<p><a href=\"https://www.inlab.de/balance.html\" target=\"_blank\" rel=\"noopener\">Balance</a> is a tiny (few-hundred lines of C) TCP load balancer that’s fast and simple to use. For example:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ balance -f 9000 127.0.0.1:900&#123;1,2,3&#125; &amp;</span><br><span class=\"line\">$ curl localhost:9000</span><br><span class=\"line\"><span class=\"string\">\"Hello, world 192.168.1.39! 20 hits.\"</span></span><br></pre></td></tr></table></figure>\n<p>The above one-liner launches balance, listening on port <code>9000</code> and balancing across ports <code>9001-9003</code>. But we don’t want to run it in the foreground like this. Let’s write a unit file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /etc/systemd/system/balance.service</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Balance - Simple TCP Load Balancer</span><br><span class=\"line\">After=syslog.target network.target nss-lookup.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/usr/bin/balance -f 9000 127.0.0.1:9001 127.0.0.1:9002 127.0.0.1:9003</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">$ systemctl daemon-reload</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> balance</span><br><span class=\"line\">$ systemctl start balance</span><br><span class=\"line\">$ systemctl status balance</span><br><span class=\"line\">● balance.service - Balance - Simple TCP Load Balancer</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/balance.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Fri 2016-07-01 13:56:46 BST; 3s ago</span><br><span class=\"line\"> Main PID: 32674 (balance)</span><br><span class=\"line\">    Tasks: 1 (<span class=\"built_in\">limit</span>: 512)</span><br><span class=\"line\">   Memory: 316.0K</span><br><span class=\"line\">      CPU: 10ms</span><br><span class=\"line\">   CGroup: /system.slice/balance.service</span><br><span class=\"line\">           └─32674 /usr/bin/balance -f 9000 127.0.0.1:9001 127.0.0.1:9002 127.0.0.1:9003</span><br><span class=\"line\"></span><br><span class=\"line\">Jul 01 13:56:46 luke-arch systemd[1]: Started Balance - Simple TCP Load Balancer.</span><br><span class=\"line\">$ curl localhost:9000</span><br><span class=\"line\"><span class=\"string\">\"Hello, world 192.168.1.39! 21 hits.\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>We’ve successfully recreated the three main features of PM2 using basic Linux tools, in fact, mostly just systemd. But this is only a very basic implementation. There are a number of details I’ve overlooked for the sake of simplicity:</p>\n<ul>\n<li>SSL termination.</li>\n<li>Ports <code>9001-9003</code> are currently bound to the public IP, not the private (this is just laziness in my Node.js sample app).</li>\n<li>The balance unit file has hardcoded ports 9001-9003; it should be relatively easy to dynamically configure balance and send it a signal to reload config.</li>\n<li>I’d normally use containers so that the dependencies (<em>e.g.</em>, Node.js version) is bundled inside the container and doesn’t need to be installed on the host.</li>\n</ul>\n<p>Linux init systems such as systemd are the ultimate process monitor, and systemd in particular is so much more than that. It can do all that PM2 and similar tools can do, and then some. The tooling is far superior, it’s more mature, and it has a much larger userbase of seasoned sysadmins.</p>\n<p>Learning to use systemd for running your Node.js applications (or any other applications for that matter) is much easier than you might think. Once you’ve spent a little time learning these concepts, I think you’ll agree that Linux is the best tool for the job. After all, you’ll need to configure the Linux init systemd to start PM2 on boot and restart it if it crashes. If you need the Linux init system to start your process monitor, why not just use it to run all your services?</p>\n<h2 id=\"Further-Reading\"><a href=\"#Further-Reading\" class=\"headerlink\" title=\"Further Reading\"></a>Further Reading</h2><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Systemd#Adoption_and_reception\" target=\"_blank\" rel=\"noopener\">systemd distros</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units\" target=\"_blank\" rel=\"noopener\">Good article on using systemctl</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs\" target=\"_blank\" rel=\"noopener\">Good article on using journalctl</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=hiW8eIdcRgo&amp;list=PLlh6TqkU8kg_3FpXLlHMnoVqKZysIzXlK&amp;index=6\" target=\"_blank\" rel=\"noopener\">The creator of systemd talking about security features</a></li>\n<li><a href=\"https://www.youtube.com/channel/UCvq_RgZp3kljp9X8Io9Z1DA\" target=\"_blank\" rel=\"noopener\">Videos from systemd conf 2015</a></li>\n<li><a href=\"https://www.freedesktop.org/software/systemd/man/systemd.unit.html\" target=\"_blank\" rel=\"noopener\">systemd man pages – unit</a></li>\n<li><a href=\"https://www.freedesktop.org/software/systemd/man/systemd.service.html\" target=\"_blank\" rel=\"noopener\">systemd man pages – service</a></li>\n</ul>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjruakyxr0000l5sewhltgh3i","tag_id":"cjruakyy10004l5se5pz1snps","_id":"cjruakyy8000al5sec7h3yqbu"},{"post_id":"cjruakyxr0000l5sewhltgh3i","tag_id":"cjruakyy50007l5sey03jebn4","_id":"cjruakyy8000bl5sezqatj8ye"},{"post_id":"cjruakyxr0000l5sewhltgh3i","tag_id":"cjruakyy60008l5sezxkegxey","_id":"cjruakyy8000dl5seoiqd07o2"},{"post_id":"cjruakyxy0002l5se753fbrri","tag_id":"cjruakyy50007l5sey03jebn4","_id":"cjruakyy9000fl5se53h4pi3m"},{"post_id":"cjruakyxy0002l5se753fbrri","tag_id":"cjruakyy8000cl5seamyqhgw4","_id":"cjruakyy9000gl5seken94nhe"},{"post_id":"cjruakyy30005l5se7zgwe94a","tag_id":"cjruakyy9000el5sexrc2ws1w","_id":"cjruakyya000jl5sezqxl144n"},{"post_id":"cjruakyy30005l5se7zgwe94a","tag_id":"cjruakyy50007l5sey03jebn4","_id":"cjruakyyb000kl5secddoy2a0"},{"post_id":"cjruakyy30005l5se7zgwe94a","tag_id":"cjruakyya000il5sew2x03lp6","_id":"cjruakyyb000ll5septzve6ye"},{"post_id":"cjruakz58000ml5se5ul2hkgy","tag_id":"cjruakz5a000nl5sedm5j3j4k","_id":"cjruakz5b000pl5se65jw6gkn"},{"post_id":"cjruakz58000ml5se5ul2hkgy","tag_id":"cjruakyy50007l5sey03jebn4","_id":"cjruakz5b000ql5se9bjowfoq"},{"post_id":"cjruakz58000ml5se5ul2hkgy","tag_id":"cjruakz5b000ol5sef41qp5d7","_id":"cjruakz5b000rl5seraph8gu3"}],"Tag":[{"name":"database","_id":"cjruakyy10004l5se5pz1snps"},{"name":"sysadmin","_id":"cjruakyy50007l5sey03jebn4"},{"name":"mongodb","_id":"cjruakyy60008l5sezxkegxey"},{"name":"iptables","_id":"cjruakyy8000cl5seamyqhgw4"},{"name":"centos","_id":"cjruakyy9000el5sexrc2ws1w"},{"name":"jkom","_id":"cjruakyya000il5sew2x03lp6"},{"name":"deployment","_id":"cjruakz5a000nl5sedm5j3j4k"},{"name":"nodejs","_id":"cjruakz5b000ol5sef41qp5d7"}]}}